
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00001c26  00001cba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011c  0080011c  00001cd6  2**0
                  ALLOC
  3 .stab         00000024  00000000  00000000  00001cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000001e  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000005c  00000000  00000000  00001d1a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 000000d0  00000000  00000000  00001db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002062  00000000  00000000  00001e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000a84  00000000  00000000  00003eea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000dbc  00000000  00000000  0000496e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000274  00000000  00000000  0000572c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000797  00000000  00000000  000059a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001803  00000000  00000000  00006137  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000000a0  00000000  00000000  0000793a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c6 c0       	rjmp	.+396    	; 0x18e <__ctors_end>
       2:	00 00       	nop
       4:	e2 c0       	rjmp	.+452    	; 0x1ca <__bad_interrupt>
       6:	00 00       	nop
       8:	e0 c0       	rjmp	.+448    	; 0x1ca <__bad_interrupt>
       a:	00 00       	nop
       c:	de c0       	rjmp	.+444    	; 0x1ca <__bad_interrupt>
       e:	00 00       	nop
      10:	dc c0       	rjmp	.+440    	; 0x1ca <__bad_interrupt>
      12:	00 00       	nop
      14:	da c0       	rjmp	.+436    	; 0x1ca <__bad_interrupt>
      16:	00 00       	nop
      18:	d8 c0       	rjmp	.+432    	; 0x1ca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d6 c0       	rjmp	.+428    	; 0x1ca <__bad_interrupt>
      1e:	00 00       	nop
      20:	d4 c0       	rjmp	.+424    	; 0x1ca <__bad_interrupt>
      22:	00 00       	nop
      24:	d2 c0       	rjmp	.+420    	; 0x1ca <__bad_interrupt>
      26:	00 00       	nop
      28:	d0 c0       	rjmp	.+416    	; 0x1ca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	ce c0       	rjmp	.+412    	; 0x1ca <__bad_interrupt>
      2e:	00 00       	nop
      30:	cc c0       	rjmp	.+408    	; 0x1ca <__bad_interrupt>
      32:	00 00       	nop
      34:	ca c0       	rjmp	.+404    	; 0x1ca <__bad_interrupt>
      36:	00 00       	nop
      38:	c8 c0       	rjmp	.+400    	; 0x1ca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c6 c0       	rjmp	.+396    	; 0x1ca <__bad_interrupt>
      3e:	00 00       	nop
      40:	c4 c0       	rjmp	.+392    	; 0x1ca <__bad_interrupt>
      42:	00 00       	nop
      44:	c2 c0       	rjmp	.+388    	; 0x1ca <__bad_interrupt>
      46:	00 00       	nop
      48:	c0 c0       	rjmp	.+384    	; 0x1ca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	be c0       	rjmp	.+380    	; 0x1ca <__bad_interrupt>
      4e:	00 00       	nop
      50:	bc c0       	rjmp	.+376    	; 0x1ca <__bad_interrupt>
      52:	00 00       	nop
      54:	ba c0       	rjmp	.+372    	; 0x1ca <__bad_interrupt>
      56:	00 00       	nop
      58:	b8 c0       	rjmp	.+368    	; 0x1ca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b6 c0       	rjmp	.+364    	; 0x1ca <__bad_interrupt>
      5e:	00 00       	nop
      60:	b4 c0       	rjmp	.+360    	; 0x1ca <__bad_interrupt>
      62:	00 00       	nop
      64:	b2 c0       	rjmp	.+356    	; 0x1ca <__bad_interrupt>
      66:	00 00       	nop
      68:	b0 c0       	rjmp	.+352    	; 0x1ca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ae c0       	rjmp	.+348    	; 0x1ca <__bad_interrupt>
      6e:	00 00       	nop
      70:	ac c0       	rjmp	.+344    	; 0x1ca <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__bad_interrupt>
      76:	00 00       	nop
      78:	a8 c0       	rjmp	.+336    	; 0x1ca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a6 c0       	rjmp	.+332    	; 0x1ca <__bad_interrupt>
      7e:	00 00       	nop
      80:	a4 c0       	rjmp	.+328    	; 0x1ca <__bad_interrupt>
      82:	00 00       	nop
      84:	a2 c0       	rjmp	.+324    	; 0x1ca <__bad_interrupt>
      86:	00 00       	nop
      88:	a0 c0       	rjmp	.+320    	; 0x1ca <__bad_interrupt>
	...

0000008c <__trampolines_end>:
      8c:	6e 61       	ori	r22, 0x1E	; 30
      8e:	6e 00       	.word	0x006e	; ????

00000090 <__c.2332>:
      90:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      a0:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      b0:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      c0:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      d0:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      e0:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      f0:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     100:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     110:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     120:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     130:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     140:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     150:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     160:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     170:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     180:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000018e <__ctors_end>:
     18e:	11 24       	eor	r1, r1
     190:	1f be       	out	0x3f, r1	; 63
     192:	cf ef       	ldi	r28, 0xFF	; 255
     194:	d0 e4       	ldi	r29, 0x40	; 64
     196:	de bf       	out	0x3e, r29	; 62
     198:	cd bf       	out	0x3d, r28	; 61

0000019a <__do_copy_data>:
     19a:	11 e0       	ldi	r17, 0x01	; 1
     19c:	a0 e0       	ldi	r26, 0x00	; 0
     19e:	b1 e0       	ldi	r27, 0x01	; 1
     1a0:	e6 e2       	ldi	r30, 0x26	; 38
     1a2:	fc e1       	ldi	r31, 0x1C	; 28
     1a4:	00 e0       	ldi	r16, 0x00	; 0
     1a6:	0b bf       	out	0x3b, r16	; 59
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <__do_copy_data+0x14>
     1aa:	07 90       	elpm	r0, Z+
     1ac:	0d 92       	st	X+, r0
     1ae:	ac 31       	cpi	r26, 0x1C	; 28
     1b0:	b1 07       	cpc	r27, r17
     1b2:	d9 f7       	brne	.-10     	; 0x1aa <__do_copy_data+0x10>

000001b4 <__do_clear_bss>:
     1b4:	21 e0       	ldi	r18, 0x01	; 1
     1b6:	ac e1       	ldi	r26, 0x1C	; 28
     1b8:	b1 e0       	ldi	r27, 0x01	; 1
     1ba:	01 c0       	rjmp	.+2      	; 0x1be <.do_clear_bss_start>

000001bc <.do_clear_bss_loop>:
     1bc:	1d 92       	st	X+, r1

000001be <.do_clear_bss_start>:
     1be:	af 31       	cpi	r26, 0x1F	; 31
     1c0:	b2 07       	cpc	r27, r18
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <.do_clear_bss_loop>
     1c4:	b4 d5       	rcall	.+2920   	; 0xd2e <main>
     1c6:	0c 94 11 0e 	jmp	0x1c22	; 0x1c22 <_exit>

000001ca <__bad_interrupt>:
     1ca:	1a cf       	rjmp	.-460    	; 0x0 <__vectors>

000001cc <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
     1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <i2c_delay_T2+0xc>
6:	nop          ; 1   "
     1d8:	00 00       	nop
	ret          ; 3   "
     1da:	08 95       	ret

000001dc <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
     1dc:	39 98       	cbi	0x07, 1	; 7
	cbi SCL_DDR,SCL		;release SCL
     1de:	38 98       	cbi	0x07, 0	; 7
	cbi SDA_OUT,SDA
     1e0:	41 98       	cbi	0x08, 1	; 8
	cbi SCL_OUT,SCL
     1e2:	40 98       	cbi	0x08, 0	; 8
	ret
     1e4:	08 95       	ret

000001e6 <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
     1e6:	39 9a       	sbi	0x07, 1	; 7
	rcall 	i2c_delay_T2	;delay T/2
     1e8:	f1 df       	rcall	.-30     	; 0x1cc <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
     1ea:	1d c0       	rjmp	.+58     	; 0x226 <i2c_write>
	ret
     1ec:	08 95       	ret

000001ee <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
     1ee:	38 9a       	sbi	0x07, 0	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     1f0:	ed df       	rcall	.-38     	; 0x1cc <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     1f2:	39 98       	cbi	0x07, 1	; 7
	rcall	i2c_delay_T2	;delay T/2
     1f4:	eb df       	rcall	.-42     	; 0x1cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     1f6:	38 98       	cbi	0x07, 0	; 7
	rcall 	i2c_delay_T2	;delay  T/2
     1f8:	e9 df       	rcall	.-46     	; 0x1cc <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
     1fa:	39 9a       	sbi	0x07, 1	; 7
	rcall 	i2c_delay_T2	;delay	T/2
     1fc:	e7 df       	rcall	.-50     	; 0x1cc <i2c_delay_T2>
	
	rcall	i2c_write	;write address
     1fe:	13 c0       	rjmp	.+38     	; 0x226 <i2c_write>
	ret
     200:	08 95       	ret

00000202 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
     202:	08 2e       	mov	r0, r24

00000204 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
     204:	39 9a       	sbi	0x07, 1	; 7
	rcall 	i2c_delay_T2	;delay T/2
     206:	e2 df       	rcall	.-60     	; 0x1cc <i2c_delay_T2>
	mov	r24,__tmp_reg__
     208:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
     20a:	0d d0       	rcall	.+26     	; 0x226 <i2c_write>
	tst	r24		;if device not busy -> done
     20c:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
     20e:	11 f0       	breq	.+4      	; 0x214 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
     210:	02 d0       	rcall	.+4      	; 0x216 <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
     212:	f8 cf       	rjmp	.-16     	; 0x204 <i2c_start_wait1>

00000214 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
     214:	08 95       	ret

00000216 <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
     216:	38 9a       	sbi	0x07, 0	; 7
	sbi	SDA_DDR,SDA	;force SDA low
     218:	39 9a       	sbi	0x07, 1	; 7
	rcall	i2c_delay_T2	;delay T/2
     21a:	d8 df       	rcall	.-80     	; 0x1cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     21c:	38 98       	cbi	0x07, 0	; 7
	rcall	i2c_delay_T2	;delay T/2
     21e:	d6 df       	rcall	.-84     	; 0x1cc <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
     220:	39 98       	cbi	0x07, 1	; 7
	rcall	i2c_delay_T2	;delay T/2
     222:	d4 cf       	rjmp	.-88     	; 0x1cc <i2c_delay_T2>
	ret
     224:	08 95       	ret

00000226 <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
     226:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
     228:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
     22a:	01 c0       	rjmp	.+2      	; 0x22e <i2c_write_first>

0000022c <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
     22c:	88 0f       	add	r24, r24

0000022e <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
     22e:	59 f0       	breq	.+22     	; 0x246 <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
     230:	38 9a       	sbi	0x07, 0	; 7
	brcc	i2c_write_low
     232:	18 f4       	brcc	.+6      	; 0x23a <i2c_write_low>
	nop
     234:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
     236:	39 98       	cbi	0x07, 1	; 7
	rjmp	i2c_write_high
     238:	02 c0       	rjmp	.+4      	; 0x23e <i2c_write_high>

0000023a <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
     23a:	39 9a       	sbi	0x07, 1	; 7
	rjmp	i2c_write_high
     23c:	00 c0       	rjmp	.+0      	; 0x23e <i2c_write_high>

0000023e <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
     23e:	c6 df       	rcall	.-116    	; 0x1cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     240:	38 98       	cbi	0x07, 0	; 7
	rcall	i2c_delay_T2	;delay T/2
     242:	c4 df       	rcall	.-120    	; 0x1cc <i2c_delay_T2>
	rjmp	i2c_write_bit
     244:	f3 cf       	rjmp	.-26     	; 0x22c <i2c_write_bit>

00000246 <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
     246:	38 9a       	sbi	0x07, 0	; 7
	cbi	SDA_DDR,SDA	;release SDA
     248:	39 98       	cbi	0x07, 1	; 7
	rcall	i2c_delay_T2	;delay T/2
     24a:	c0 df       	rcall	.-128    	; 0x1cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     24c:	38 98       	cbi	0x07, 0	; 7

0000024e <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
     24e:	30 9b       	sbis	0x06, 0	; 6
	rjmp	i2c_ack_wait
     250:	fe cf       	rjmp	.-4      	; 0x24e <i2c_ack_wait>
	
	clr	r24		;return 0
     252:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
     254:	31 99       	sbic	0x06, 1	; 6
	ldi	r24,1
     256:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
     258:	b9 df       	rcall	.-142    	; 0x1cc <i2c_delay_T2>
	clr	r25
     25a:	99 27       	eor	r25, r25
	ret
     25c:	08 95       	ret

0000025e <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
     25e:	88 27       	eor	r24, r24
	rjmp	i2c_read
     260:	01 c0       	rjmp	.+2      	; 0x264 <i2c_read>

00000262 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
     262:	81 e0       	ldi	r24, 0x01	; 1

00000264 <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
     264:	71 e0       	ldi	r23, 0x01	; 1

00000266 <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
     266:	38 9a       	sbi	0x07, 0	; 7
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
     268:	39 98       	cbi	0x07, 1	; 7
	rcall	i2c_delay_T2	;delay T/2
     26a:	b0 df       	rcall	.-160    	; 0x1cc <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
     26c:	38 98       	cbi	0x07, 0	; 7
	rcall	i2c_delay_T2	;delay T/2
     26e:	ae df       	rcall	.-164    	; 0x1cc <i2c_delay_T2>

00000270 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
     270:	30 9b       	sbis	0x06, 0	; 6
    rjmp	i2c_read_stretch
     272:	fe cf       	rjmp	.-4      	; 0x270 <i2c_read_stretch>
    	
	clc			;clear carry flag
     274:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
     276:	31 99       	sbic	0x06, 1	; 6
	sec			;  set carry flag
     278:	08 94       	sec
	
	rol	r23		;store bit
     27a:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
     27c:	a0 f7       	brcc	.-24     	; 0x266 <i2c_read_bit>

0000027e <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
     27e:	38 9a       	sbi	0x07, 0	; 7
	cpi	r24,1
     280:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
     282:	11 f0       	breq	.+4      	; 0x288 <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
     284:	39 98       	cbi	0x07, 1	; 7
	rjmp	i2c_put_ack_high
     286:	01 c0       	rjmp	.+2      	; 0x28a <i2c_put_ack_high>

00000288 <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
     288:	39 9a       	sbi	0x07, 1	; 7

0000028a <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
     28a:	a0 df       	rcall	.-192    	; 0x1cc <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
     28c:	38 98       	cbi	0x07, 0	; 7

0000028e <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
     28e:	30 9b       	sbis	0x06, 0	; 6
	rjmp	i2c_put_ack_wait
     290:	fe cf       	rjmp	.-4      	; 0x28e <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
     292:	9c df       	rcall	.-200    	; 0x1cc <i2c_delay_T2>
	mov	r24,r23
     294:	87 2f       	mov	r24, r23
	clr	r25
     296:	99 27       	eor	r25, r25
	ret
     298:	08 95       	ret

0000029a <LCD_Command>:
}

double DHT_convertToKelvin(double temp)
{
	return (temp + 273.15);
}
     29a:	95 b1       	in	r25, 0x05	; 5
     29c:	9f 70       	andi	r25, 0x0F	; 15
     29e:	28 2f       	mov	r18, r24
     2a0:	20 7f       	andi	r18, 0xF0	; 240
     2a2:	92 2b       	or	r25, r18
     2a4:	95 b9       	out	0x05, r25	; 5
     2a6:	28 98       	cbi	0x05, 0	; 5
     2a8:	29 9a       	sbi	0x05, 1	; 5
     2aa:	00 00       	nop
     2ac:	29 98       	cbi	0x05, 1	; 5
     2ae:	32 e4       	ldi	r19, 0x42	; 66
     2b0:	3a 95       	dec	r19
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Command+0x16>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Command+0x1c>
     2b6:	25 b1       	in	r18, 0x05	; 5
     2b8:	2f 70       	andi	r18, 0x0F	; 15
     2ba:	30 e1       	ldi	r19, 0x10	; 16
     2bc:	83 9f       	mul	r24, r19
     2be:	c0 01       	movw	r24, r0
     2c0:	11 24       	eor	r1, r1
     2c2:	82 2b       	or	r24, r18
     2c4:	85 b9       	out	0x05, r24	; 5
     2c6:	29 9a       	sbi	0x05, 1	; 5
     2c8:	00 00       	nop
     2ca:	29 98       	cbi	0x05, 1	; 5
     2cc:	83 ef       	ldi	r24, 0xF3	; 243
     2ce:	91 e0       	ldi	r25, 0x01	; 1
     2d0:	01 97       	sbiw	r24, 0x01	; 1
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCD_Command+0x36>
     2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <LCD_Command+0x3c>
     2d6:	00 00       	nop
     2d8:	08 95       	ret

000002da <LCD_Char>:
     2da:	95 b1       	in	r25, 0x05	; 5
     2dc:	9f 70       	andi	r25, 0x0F	; 15
     2de:	28 2f       	mov	r18, r24
     2e0:	20 7f       	andi	r18, 0xF0	; 240
     2e2:	92 2b       	or	r25, r18
     2e4:	95 b9       	out	0x05, r25	; 5
     2e6:	28 9a       	sbi	0x05, 0	; 5
     2e8:	29 9a       	sbi	0x05, 1	; 5
     2ea:	00 00       	nop
     2ec:	29 98       	cbi	0x05, 1	; 5
     2ee:	32 e4       	ldi	r19, 0x42	; 66
     2f0:	3a 95       	dec	r19
     2f2:	f1 f7       	brne	.-4      	; 0x2f0 <LCD_Char+0x16>
     2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <LCD_Char+0x1c>
     2f6:	25 b1       	in	r18, 0x05	; 5
     2f8:	2f 70       	andi	r18, 0x0F	; 15
     2fa:	30 e1       	ldi	r19, 0x10	; 16
     2fc:	83 9f       	mul	r24, r19
     2fe:	c0 01       	movw	r24, r0
     300:	11 24       	eor	r1, r1
     302:	82 2b       	or	r24, r18
     304:	85 b9       	out	0x05, r24	; 5
     306:	29 9a       	sbi	0x05, 1	; 5
     308:	00 00       	nop
     30a:	29 98       	cbi	0x05, 1	; 5
     30c:	83 ef       	ldi	r24, 0xF3	; 243
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	01 97       	sbiw	r24, 0x01	; 1
     312:	f1 f7       	brne	.-4      	; 0x310 <LCD_Char+0x36>
     314:	00 c0       	rjmp	.+0      	; 0x316 <LCD_Char+0x3c>
     316:	00 00       	nop
     318:	08 95       	ret

0000031a <LCD_Init>:
     31a:	8f ef       	ldi	r24, 0xFF	; 255
     31c:	84 b9       	out	0x04, r24	; 4
     31e:	87 e8       	ldi	r24, 0x87	; 135
     320:	93 e1       	ldi	r25, 0x13	; 19
     322:	01 97       	sbiw	r24, 0x01	; 1
     324:	f1 f7       	brne	.-4      	; 0x322 <LCD_Init+0x8>
     326:	00 c0       	rjmp	.+0      	; 0x328 <LCD_Init+0xe>
     328:	00 00       	nop
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	b6 df       	rcall	.-148    	; 0x29a <LCD_Command>
     32e:	88 e2       	ldi	r24, 0x28	; 40
     330:	b4 df       	rcall	.-152    	; 0x29a <LCD_Command>
     332:	8c e0       	ldi	r24, 0x0C	; 12
     334:	b2 df       	rcall	.-156    	; 0x29a <LCD_Command>
     336:	86 e0       	ldi	r24, 0x06	; 6
     338:	b0 df       	rcall	.-160    	; 0x29a <LCD_Command>
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	ae df       	rcall	.-164    	; 0x29a <LCD_Command>
     33e:	83 ef       	ldi	r24, 0xF3	; 243
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	f1 f7       	brne	.-4      	; 0x342 <LCD_Init+0x28>
     346:	00 c0       	rjmp	.+0      	; 0x348 <LCD_Init+0x2e>
     348:	00 00       	nop
     34a:	08 95       	ret

0000034c <LCD_String>:
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ec 01       	movw	r28, r24
     352:	88 81       	ld	r24, Y
     354:	88 23       	and	r24, r24
     356:	29 f0       	breq	.+10     	; 0x362 <LCD_String+0x16>
     358:	21 96       	adiw	r28, 0x01	; 1
     35a:	bf df       	rcall	.-130    	; 0x2da <LCD_Char>
     35c:	89 91       	ld	r24, Y+
     35e:	81 11       	cpse	r24, r1
     360:	fc cf       	rjmp	.-8      	; 0x35a <LCD_String+0xe>
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <LCD_Clear>:
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	97 df       	rcall	.-210    	; 0x29a <LCD_Command>
     36c:	83 ef       	ldi	r24, 0xF3	; 243
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	01 97       	sbiw	r24, 0x01	; 1
     372:	f1 f7       	brne	.-4      	; 0x370 <LCD_Clear+0x8>
     374:	00 c0       	rjmp	.+0      	; 0x376 <LCD_Clear+0xe>
     376:	00 00       	nop
     378:	80 e8       	ldi	r24, 0x80	; 128
     37a:	8f cf       	rjmp	.-226    	; 0x29a <LCD_Command>
     37c:	08 95       	ret

0000037e <DHT_setup>:
     37e:	2f e7       	ldi	r18, 0x7F	; 127
     380:	8a e1       	ldi	r24, 0x1A	; 26
     382:	96 e0       	ldi	r25, 0x06	; 6
     384:	21 50       	subi	r18, 0x01	; 1
     386:	80 40       	sbci	r24, 0x00	; 0
     388:	90 40       	sbci	r25, 0x00	; 0
     38a:	e1 f7       	brne	.-8      	; 0x384 <DHT_setup+0x6>
     38c:	00 c0       	rjmp	.+0      	; 0x38e <DHT_setup+0x10>
     38e:	00 00       	nop
     390:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <DHT_STATUS>
     394:	08 95       	ret

00000396 <DHT_readRaw>:
     396:	cf 92       	push	r12
     398:	df 92       	push	r13
     39a:	ef 92       	push	r14
     39c:	ff 92       	push	r15
     39e:	cf 93       	push	r28
     3a0:	df 93       	push	r29
     3a2:	00 d0       	rcall	.+0      	; 0x3a4 <DHT_readRaw+0xe>
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <DHT_readRaw+0x10>
     3a6:	1f 92       	push	r1
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	68 2f       	mov	r22, r24
     3ae:	79 2f       	mov	r23, r25
     3b0:	fe 01       	movw	r30, r28
     3b2:	31 96       	adiw	r30, 0x01	; 1
     3b4:	85 e0       	ldi	r24, 0x05	; 5
     3b6:	df 01       	movw	r26, r30
     3b8:	1d 92       	st	X+, r1
     3ba:	8a 95       	dec	r24
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <DHT_readRaw+0x22>
     3be:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <DHT_STATUS>
     3c2:	5f 98       	cbi	0x0b, 7	; 11
     3c4:	57 9a       	sbi	0x0a, 7	; 10
     3c6:	83 ed       	ldi	r24, 0xD3	; 211
     3c8:	90 e3       	ldi	r25, 0x30	; 48
     3ca:	01 97       	sbiw	r24, 0x01	; 1
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <DHT_readRaw+0x34>
     3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <DHT_readRaw+0x3a>
     3d0:	00 00       	nop
     3d2:	5f 9a       	sbi	0x0b, 7	; 11
     3d4:	57 98       	cbi	0x0a, 7	; 10
     3d6:	2f e1       	ldi	r18, 0x1F	; 31
     3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <DHT_readRaw+0x52>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <DHT_readRaw+0x46>
     3dc:	21 50       	subi	r18, 0x01	; 1
     3de:	21 f4       	brne	.+8      	; 0x3e8 <DHT_readRaw+0x52>
     3e0:	84 e0       	ldi	r24, 0x04	; 4
     3e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DHT_STATUS>
     3e6:	83 c0       	rjmp	.+262    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     3e8:	4f 99       	sbic	0x09, 7	; 9
     3ea:	f7 cf       	rjmp	.-18     	; 0x3da <DHT_readRaw+0x44>
     3ec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DHT_STATUS>
     3f0:	88 23       	and	r24, r24
     3f2:	41 f0       	breq	.+16     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3f4:	7c c0       	rjmp	.+248    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <DHT_readRaw+0x62>
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	29 f4       	brne	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3fc:	84 e0       	ldi	r24, 0x04	; 4
     3fe:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DHT_STATUS>
     402:	0b c0       	rjmp	.+22     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     404:	23 e3       	ldi	r18, 0x33	; 51
     406:	4f 9b       	sbis	0x09, 7	; 9
     408:	f6 cf       	rjmp	.-20     	; 0x3f6 <DHT_readRaw+0x60>
     40a:	07 c0       	rjmp	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	21 50       	subi	r18, 0x01	; 1
     410:	29 f4       	brne	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DHT_STATUS>
     418:	6a c0       	rjmp	.+212    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     41a:	23 e3       	ldi	r18, 0x33	; 51
     41c:	4f 99       	sbic	0x09, 7	; 9
     41e:	f6 cf       	rjmp	.-20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     420:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DHT_STATUS>
     424:	88 23       	and	r24, r24
     426:	09 f4       	brne	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	3d c0       	rjmp	.+122    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     42a:	61 c0       	rjmp	.+194    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	31 f4       	brne	.+12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     432:	50 93 1e 01 	sts	0x011E, r21	; 0x80011e <DHT_STATUS>
     436:	45 e0       	ldi	r20, 0x05	; 5
     438:	31 c0       	rjmp	.+98     	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     43a:	42 2f       	mov	r20, r18
     43c:	24 e2       	ldi	r18, 0x24	; 36
     43e:	4f 9b       	sbis	0x09, 7	; 9
     440:	f5 cf       	rjmp	.-22     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     442:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <DHT_STATUS>
     446:	21 11       	cpse	r18, r1
     448:	26 c0       	rjmp	.+76     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     44a:	9b e0       	ldi	r25, 0x0B	; 11
     44c:	9a 95       	dec	r25
     44e:	f1 f7       	brne	.-4      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     452:	4f 9b       	sbis	0x09, 7	; 9
     454:	1b c0       	rjmp	.+54     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     456:	e1 e0       	ldi	r30, 0x01	; 1
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	ec 0f       	add	r30, r28
     45c:	fd 1f       	adc	r31, r29
     45e:	e4 0f       	add	r30, r20
     460:	f1 1d       	adc	r31, r1
     462:	20 81       	ld	r18, Z
     464:	d7 01       	movw	r26, r14
     466:	c6 01       	movw	r24, r12
     468:	03 2e       	mov	r0, r19
     46a:	04 c0       	rjmp	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	aa 1f       	adc	r26, r26
     472:	bb 1f       	adc	r27, r27
     474:	0a 94       	dec	r0
     476:	d2 f7       	brpl	.-12     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     478:	82 2b       	or	r24, r18
     47a:	80 83       	st	Z, r24
     47c:	07 c0       	rjmp	.+14     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     47e:	00 c0       	rjmp	.+0      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     480:	21 50       	subi	r18, 0x01	; 1
     482:	29 f4       	brne	.+10     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     484:	50 93 1e 01 	sts	0x011E, r21	; 0x80011e <DHT_STATUS>
     488:	24 2f       	mov	r18, r20
     48a:	06 c0       	rjmp	.+12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     48c:	23 e3       	ldi	r18, 0x33	; 51
     48e:	4f 99       	sbic	0x09, 7	; 9
     490:	f6 cf       	rjmp	.-20     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
     492:	24 2f       	mov	r18, r20
     494:	01 c0       	rjmp	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	24 2f       	mov	r18, r20
     498:	31 50       	subi	r19, 0x01	; 1
     49a:	7a f6       	brpl	.-98     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     49c:	4f 5f       	subi	r20, 0xFF	; 255
     49e:	45 30       	cpi	r20, 0x05	; 5
     4a0:	38 f0       	brcs	.+14     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4a2:	08 c0       	rjmp	.+16     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4a4:	40 e0       	ldi	r20, 0x00	; 0
     4a6:	c1 2c       	mov	r12, r1
     4a8:	d1 2c       	mov	r13, r1
     4aa:	76 01       	movw	r14, r12
     4ac:	c3 94       	inc	r12
     4ae:	54 e0       	ldi	r21, 0x04	; 4
     4b0:	37 e0       	ldi	r19, 0x07	; 7
     4b2:	c4 cf       	rjmp	.-120    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     4b4:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DHT_STATUS>
     4b8:	81 11       	cpse	r24, r1
     4ba:	19 c0       	rjmp	.+50     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4bc:	99 81       	ldd	r25, Y+1	; 0x01
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	98 0f       	add	r25, r24
     4c2:	8b 81       	ldd	r24, Y+3	; 0x03
     4c4:	98 0f       	add	r25, r24
     4c6:	8c 81       	ldd	r24, Y+4	; 0x04
     4c8:	89 0f       	add	r24, r25
     4ca:	9d 81       	ldd	r25, Y+5	; 0x05
     4cc:	89 17       	cp	r24, r25
     4ce:	21 f0       	breq	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4d0:	83 e0       	ldi	r24, 0x03	; 3
     4d2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DHT_STATUS>
     4d6:	0b c0       	rjmp	.+22     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4d8:	de 01       	movw	r26, r28
     4da:	11 96       	adiw	r26, 0x01	; 1
     4dc:	e6 2f       	mov	r30, r22
     4de:	f7 2f       	mov	r31, r23
     4e0:	ce 01       	movw	r24, r28
     4e2:	05 96       	adiw	r24, 0x05	; 5
     4e4:	2d 91       	ld	r18, X+
     4e6:	21 93       	st	Z+, r18
     4e8:	a8 17       	cp	r26, r24
     4ea:	b9 07       	cpc	r27, r25
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	ff 90       	pop	r15
     4fe:	ef 90       	pop	r14
     500:	df 90       	pop	r13
     502:	cf 90       	pop	r12
     504:	08 95       	ret

00000506 <DHT_read>:
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	cf 93       	push	r28
     510:	df 93       	push	r29
     512:	00 d0       	rcall	.+0      	; 0x514 <DHT_read+0xe>
     514:	00 d0       	rcall	.+0      	; 0x516 <DHT_read+0x10>
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	7c 01       	movw	r14, r24
     51c:	8b 01       	movw	r16, r22
     51e:	19 82       	std	Y+1, r1	; 0x01
     520:	1a 82       	std	Y+2, r1	; 0x02
     522:	1b 82       	std	Y+3, r1	; 0x03
     524:	1c 82       	std	Y+4, r1	; 0x04
     526:	ce 01       	movw	r24, r28
     528:	01 96       	adiw	r24, 0x01	; 1
     52a:	35 df       	rcall	.-406    	; 0x396 <DHT_readRaw>
     52c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <DHT_STATUS>
     530:	81 11       	cpse	r24, r1
     532:	14 c0       	rjmp	.+40     	; 0x55c <DHT_read+0x56>
     534:	6b 81       	ldd	r22, Y+3	; 0x03
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	f5 d4       	rcall	.+2538   	; 0xf28 <__floatunsisf>
     53e:	f7 01       	movw	r30, r14
     540:	60 83       	st	Z, r22
     542:	71 83       	std	Z+1, r23	; 0x01
     544:	82 83       	std	Z+2, r24	; 0x02
     546:	93 83       	std	Z+3, r25	; 0x03
     548:	69 81       	ldd	r22, Y+1	; 0x01
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	eb d4       	rcall	.+2518   	; 0xf28 <__floatunsisf>
     552:	f8 01       	movw	r30, r16
     554:	60 83       	st	Z, r22
     556:	71 83       	std	Z+1, r23	; 0x01
     558:	82 83       	std	Z+2, r24	; 0x02
     55a:	93 83       	std	Z+3, r25	; 0x03
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	ff 90       	pop	r15
     56e:	ef 90       	pop	r14
     570:	08 95       	ret

00000572 <mpu_read_byte>:
	// Enable data ready (bit 0) interrupt
	mpu_write_byte(MPU9250_ADDRESS, INT_ENABLE, 0x01);
	_delay_ms(100);
}

unsigned char mpu_read_byte(uint8_t device, uint8_t address){
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	c8 2f       	mov	r28, r24
     578:	d6 2f       	mov	r29, r22
	unsigned char data;
	i2c_start(device << 1);
     57a:	88 0f       	add	r24, r24
     57c:	34 de       	rcall	.-920    	; 0x1e6 <i2c_start>
	
	i2c_write(address);
     57e:	8d 2f       	mov	r24, r29
	
	i2c_stop();
     580:	52 de       	rcall	.-860    	; 0x226 <i2c_write>
     582:	49 de       	rcall	.-878    	; 0x216 <i2c_stop>
	
	i2c_start((device << 1) | 1);
     584:	8c 2f       	mov	r24, r28
     586:	88 0f       	add	r24, r24
     588:	81 60       	ori	r24, 0x01	; 1
	
	data = i2c_readNak();
     58a:	2d de       	rcall	.-934    	; 0x1e6 <i2c_start>
     58c:	68 de       	rcall	.-816    	; 0x25e <i2c_readNak>
     58e:	c8 2f       	mov	r28, r24
	
	i2c_stop();
     590:	42 de       	rcall	.-892    	; 0x216 <i2c_stop>
     592:	8c 2f       	mov	r24, r28
	
	return data;
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <mpu_write_byte>:
     59a:	cf 93       	push	r28

void mpu_write_byte(uint8_t device, uint8_t address, unsigned char data){
     59c:	df 93       	push	r29
     59e:	d6 2f       	mov	r29, r22
     5a0:	c4 2f       	mov	r28, r20
	i2c_start(device << 1);
     5a2:	88 0f       	add	r24, r24
     5a4:	20 de       	rcall	.-960    	; 0x1e6 <i2c_start>
	
	i2c_write(address);
     5a6:	8d 2f       	mov	r24, r29
     5a8:	3e de       	rcall	.-900    	; 0x226 <i2c_write>
	
	i2c_write(data);
     5aa:	8c 2f       	mov	r24, r28
     5ac:	3c de       	rcall	.-904    	; 0x226 <i2c_write>

	i2c_stop();
     5ae:	33 de       	rcall	.-922    	; 0x216 <i2c_stop>
     5b0:	df 91       	pop	r29
}
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <mpu_init>:
     5b6:	40 e0       	ldi	r20, 0x00	; 0

void mpu_init(void)
{
	// wake up device
	// Clear sleep mode bit (6), enable all sensors
	mpu_write_byte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
     5b8:	6b e6       	ldi	r22, 0x6B	; 107
     5ba:	88 e6       	ldi	r24, 0x68	; 104
     5bc:	ee df       	rcall	.-36     	; 0x59a <mpu_write_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5be:	87 ea       	ldi	r24, 0xA7	; 167
     5c0:	91 e6       	ldi	r25, 0x61	; 97
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <mpu_init+0xc>
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <mpu_init+0x12>
     5c8:	00 00       	nop
	_delay_ms(100); // Wait for all registers to reset

	// Get stable time source
	// Auto select clock source to be PLL gyroscope reference if ready else
	mpu_write_byte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
     5ca:	41 e0       	ldi	r20, 0x01	; 1
     5cc:	6b e6       	ldi	r22, 0x6B	; 107
     5ce:	88 e6       	ldi	r24, 0x68	; 104
     5d0:	e4 df       	rcall	.-56     	; 0x59a <mpu_write_byte>
     5d2:	8f e4       	ldi	r24, 0x4F	; 79
     5d4:	93 ec       	ldi	r25, 0xC3	; 195
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <mpu_init+0x20>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <mpu_init+0x26>
     5dc:	00 00       	nop
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion
	// update rates cannot be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!),
	// 8 kHz, or 1 kHz
	mpu_write_byte(MPU9250_ADDRESS, CONFIG, 0x03);
     5de:	43 e0       	ldi	r20, 0x03	; 3
     5e0:	6a e1       	ldi	r22, 0x1A	; 26
     5e2:	88 e6       	ldi	r24, 0x68	; 104
     5e4:	da df       	rcall	.-76     	; 0x59a <mpu_write_byte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	// Use a 200 Hz rate; a rate consistent with the filter update rate
	// determined inset in CONFIG above.
	mpu_write_byte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
     5e6:	44 e0       	ldi	r20, 0x04	; 4
     5e8:	69 e1       	ldi	r22, 0x19	; 25
     5ea:	88 e6       	ldi	r24, 0x68	; 104
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are
	// left-shifted into positions 4:3

	// get current GYRO_CONFIG register value
	uint8_t c = mpu_read_byte(MPU9250_ADDRESS, GYRO_CONFIG);
     5ec:	d6 df       	rcall	.-84     	; 0x59a <mpu_write_byte>
     5ee:	6b e1       	ldi	r22, 0x1B	; 27
     5f0:	88 e6       	ldi	r24, 0x68	; 104
     5f2:	bf df       	rcall	.-130    	; 0x572 <mpu_read_byte>
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | Gscale << 3; // Set full scale range for the gyro
     5f4:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <Gscale>
     5f8:	44 0f       	add	r20, r20
     5fa:	44 0f       	add	r20, r20
     5fc:	44 0f       	add	r20, r20
     5fe:	85 7e       	andi	r24, 0xE5	; 229
	// Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of
	// GYRO_CONFIG
	// c =| 0x00;
	// Write new GYRO_CONFIG value to register
	mpu_write_byte(MPU9250_ADDRESS, GYRO_CONFIG, c );
     600:	48 2b       	or	r20, r24
     602:	6b e1       	ldi	r22, 0x1B	; 27
     604:	88 e6       	ldi	r24, 0x68	; 104

	// Set accelerometer full-scale range configuration
	// Get current ACCEL_CONFIG register value
	c = mpu_read_byte(MPU9250_ADDRESS, ACCEL_CONFIG);
     606:	c9 df       	rcall	.-110    	; 0x59a <mpu_write_byte>
     608:	6c e1       	ldi	r22, 0x1C	; 28
     60a:	88 e6       	ldi	r24, 0x68	; 104
     60c:	b2 df       	rcall	.-156    	; 0x572 <mpu_read_byte>
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | Ascale << 3; // Set full scale range for the accelerometer
     60e:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
     612:	44 0f       	add	r20, r20
     614:	44 0f       	add	r20, r20
     616:	44 0f       	add	r20, r20
	// Write new ACCEL_CONFIG register value
	mpu_write_byte(MPU9250_ADDRESS, ACCEL_CONFIG, c);
     618:	87 7e       	andi	r24, 0xE7	; 231
     61a:	48 2b       	or	r20, r24
     61c:	6c e1       	ldi	r22, 0x1C	; 28
     61e:	88 e6       	ldi	r24, 0x68	; 104
	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by
	// choosing 1 for accel_fchoice_b bit [3]; in this case the bandwidth is
	// 1.13 kHz
	// Get current ACCEL_CONFIG2 register value
	c = mpu_read_byte(MPU9250_ADDRESS, ACCEL_CONFIG2);
     620:	bc df       	rcall	.-136    	; 0x59a <mpu_write_byte>
     622:	6d e1       	ldi	r22, 0x1D	; 29
     624:	88 e6       	ldi	r24, 0x68	; 104
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	// Write new ACCEL_CONFIG2 register value
	mpu_write_byte(MPU9250_ADDRESS, ACCEL_CONFIG2, c);
     626:	a5 df       	rcall	.-182    	; 0x572 <mpu_read_byte>
     628:	80 7f       	andi	r24, 0xF0	; 240
     62a:	48 2f       	mov	r20, r24
     62c:	43 60       	ori	r20, 0x03	; 3
     62e:	6d e1       	ldi	r22, 0x1D	; 29
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH
	// until interrupt cleared, clear on read of INT_STATUS, and enable
	// I2C_BYPASS_EN so additional chips can join the I2C bus and all can be
	// controlled by the Arduino as master.
	mpu_write_byte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22); // ALLOWS ACCESS TO AK
     630:	88 e6       	ldi	r24, 0x68	; 104
     632:	b3 df       	rcall	.-154    	; 0x59a <mpu_write_byte>
     634:	42 e2       	ldi	r20, 0x22	; 34
     636:	67 e3       	ldi	r22, 0x37	; 55
     638:	88 e6       	ldi	r24, 0x68	; 104
	// Enable data ready (bit 0) interrupt
	mpu_write_byte(MPU9250_ADDRESS, INT_ENABLE, 0x01);
     63a:	af df       	rcall	.-162    	; 0x59a <mpu_write_byte>
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	68 e3       	ldi	r22, 0x38	; 56
     640:	88 e6       	ldi	r24, 0x68	; 104
     642:	ab df       	rcall	.-170    	; 0x59a <mpu_write_byte>
     644:	87 ea       	ldi	r24, 0xA7	; 167
     646:	91 e6       	ldi	r25, 0x61	; 97
     648:	01 97       	sbiw	r24, 0x01	; 1
     64a:	f1 f7       	brne	.-4      	; 0x648 <mpu_init+0x92>
     64c:	00 c0       	rjmp	.+0      	; 0x64e <mpu_init+0x98>
     64e:	00 00       	nop
     650:	08 95       	ret

00000652 <mpu_read_bytes>:
	i2c_write(data);

	i2c_stop();
}

void mpu_read_bytes(uint8_t device, uint8_t address, uint8_t count, uint8_t * dest){
     652:	cf 92       	push	r12
     654:	df 92       	push	r13
     656:	ef 92       	push	r14
     658:	ff 92       	push	r15
     65a:	0f 93       	push	r16
     65c:	1f 93       	push	r17
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	c8 2f       	mov	r28, r24
     664:	16 2f       	mov	r17, r22
     666:	e4 2e       	mov	r14, r20
     668:	69 01       	movw	r12, r18
	i2c_start(device << 1);
     66a:	88 0f       	add	r24, r24
     66c:	bc dd       	rcall	.-1160   	; 0x1e6 <i2c_start>
	
	i2c_write(address);
     66e:	81 2f       	mov	r24, r17
	
	i2c_stop();
     670:	da dd       	rcall	.-1100   	; 0x226 <i2c_write>
     672:	d1 dd       	rcall	.-1118   	; 0x216 <i2c_stop>
	
	i2c_start((device << 1) | 1);
     674:	8c 2f       	mov	r24, r28
     676:	88 0f       	add	r24, r24
     678:	81 60       	ori	r24, 0x01	; 1
     67a:	b5 dd       	rcall	.-1174   	; 0x1e6 <i2c_start>
	
	uint8_t i;
	for(i = 0; i < count - 1; i++){
     67c:	f1 2c       	mov	r15, r1
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	e8 1a       	sub	r14, r24
     682:	f1 08       	sbc	r15, r1
     684:	1e 14       	cp	r1, r14
     686:	1f 04       	cpc	r1, r15
     688:	74 f4       	brge	.+28     	; 0x6a6 <mpu_read_bytes+0x54>
		dest[i] = i2c_readAck();
     68a:	c0 e0       	ldi	r28, 0x00	; 0
     68c:	86 01       	movw	r16, r12
     68e:	0c 0f       	add	r16, r28
     690:	11 1d       	adc	r17, r1
     692:	e7 dd       	rcall	.-1074   	; 0x262 <i2c_readAck>
     694:	f8 01       	movw	r30, r16
     696:	80 83       	st	Z, r24
	i2c_stop();
	
	i2c_start((device << 1) | 1);
	
	uint8_t i;
	for(i = 0; i < count - 1; i++){
     698:	cf 5f       	subi	r28, 0xFF	; 255
     69a:	8c 2f       	mov	r24, r28
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	8e 15       	cp	r24, r14
     6a0:	9f 05       	cpc	r25, r15
     6a2:	a4 f3       	brlt	.-24     	; 0x68c <mpu_read_bytes+0x3a>
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <mpu_read_bytes+0x56>
		dest[i] = i2c_readAck();
	}
	dest[i] = i2c_readNak();
     6a6:	c0 e0       	ldi	r28, 0x00	; 0
     6a8:	c6 01       	movw	r24, r12
     6aa:	8c 0f       	add	r24, r28
     6ac:	91 1d       	adc	r25, r1
     6ae:	ec 01       	movw	r28, r24
     6b0:	d6 dd       	rcall	.-1108   	; 0x25e <i2c_readNak>
	i2c_stop();
     6b2:	88 83       	st	Y, r24
     6b4:	b0 dd       	rcall	.-1184   	; 0x216 <i2c_stop>
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	08 95       	ret

000006c8 <mpu_calibrate>:

// Function which accumulates gyro and accelerometer data after device
// initialization. It calculates the average of the at-rest readings and then
// loads the resulting offsets into accelerometer and gyro bias registers.
void mpu_calibrate(float * gyroBias, float * accelBias)
{
     6c8:	2f 92       	push	r2
     6ca:	3f 92       	push	r3
     6cc:	4f 92       	push	r4
     6ce:	5f 92       	push	r5
     6d0:	6f 92       	push	r6
     6d2:	7f 92       	push	r7
     6d4:	8f 92       	push	r8
     6d6:	9f 92       	push	r9
     6d8:	af 92       	push	r10
     6da:	bf 92       	push	r11
     6dc:	cf 92       	push	r12
     6de:	df 92       	push	r13
     6e0:	ef 92       	push	r14
     6e2:	ff 92       	push	r15
     6e4:	0f 93       	push	r16
     6e6:	1f 93       	push	r17
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	ef 97       	sbiw	r28, 0x3f	; 63
     6f2:	0f b6       	in	r0, 0x3f	; 63
     6f4:	f8 94       	cli
     6f6:	de bf       	out	0x3e, r29	; 62
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	cd bf       	out	0x3d, r28	; 61
     6fc:	9d ab       	std	Y+53, r25	; 0x35
     6fe:	8c ab       	std	Y+52, r24	; 0x34
     700:	7f ab       	std	Y+55, r23	; 0x37
     702:	6e ab       	std	Y+54, r22	; 0x36
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};

	// reset device
	// Write a one to bit 7 reset bit; toggle reset device
	mpu_write_byte(MPU9250_ADDRESS, PWR_MGMT_1, READ_FLAG);
     704:	40 e8       	ldi	r20, 0x80	; 128
     706:	6b e6       	ldi	r22, 0x6B	; 107
     708:	88 e6       	ldi	r24, 0x68	; 104
     70a:	47 df       	rcall	.-370    	; 0x59a <mpu_write_byte>
     70c:	87 ea       	ldi	r24, 0xA7	; 167
     70e:	91 e6       	ldi	r25, 0x61	; 97
     710:	01 97       	sbiw	r24, 0x01	; 1
     712:	f1 f7       	brne	.-4      	; 0x710 <mpu_calibrate+0x48>
     714:	00 c0       	rjmp	.+0      	; 0x716 <mpu_calibrate+0x4e>
     716:	00 00       	nop
	_delay_ms(100);

	// get stable time source; Auto select clock source to be PLL gyroscope
	// reference if ready else use the internal oscillator, bits 2:0 = 001
	mpu_write_byte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	6b e6       	ldi	r22, 0x6B	; 107
     71c:	88 e6       	ldi	r24, 0x68	; 104
     71e:	3d df       	rcall	.-390    	; 0x59a <mpu_write_byte>
	mpu_write_byte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	6c e6       	ldi	r22, 0x6C	; 108
     724:	88 e6       	ldi	r24, 0x68	; 104
     726:	39 df       	rcall	.-398    	; 0x59a <mpu_write_byte>
     728:	af e4       	ldi	r26, 0x4F	; 79
     72a:	b3 ec       	ldi	r27, 0xC3	; 195
     72c:	11 97       	sbiw	r26, 0x01	; 1
     72e:	f1 f7       	brne	.-4      	; 0x72c <mpu_calibrate+0x64>
     730:	00 c0       	rjmp	.+0      	; 0x732 <mpu_calibrate+0x6a>
     732:	00 00       	nop
	_delay_ms(200);

	// Configure device for bias calculation
	// Disable all interrupts
	mpu_write_byte(MPU9250_ADDRESS, INT_ENABLE, 0x00);
     734:	40 e0       	ldi	r20, 0x00	; 0
     736:	68 e3       	ldi	r22, 0x38	; 56
     738:	88 e6       	ldi	r24, 0x68	; 104
     73a:	2f df       	rcall	.-418    	; 0x59a <mpu_write_byte>
	// Disable FIFO
	mpu_write_byte(MPU9250_ADDRESS, FIFO_EN, 0x00);
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	63 e2       	ldi	r22, 0x23	; 35
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	2b df       	rcall	.-426    	; 0x59a <mpu_write_byte>
	// Turn on internal clock source
	mpu_write_byte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	6b e6       	ldi	r22, 0x6B	; 107
     748:	88 e6       	ldi	r24, 0x68	; 104
     74a:	27 df       	rcall	.-434    	; 0x59a <mpu_write_byte>
	// Disable I2C master
	mpu_write_byte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00);
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	64 e2       	ldi	r22, 0x24	; 36
     750:	88 e6       	ldi	r24, 0x68	; 104
     752:	23 df       	rcall	.-442    	; 0x59a <mpu_write_byte>
	// Disable FIFO and I2C master modes
	mpu_write_byte(MPU9250_ADDRESS, USER_CTRL, 0x00);
     754:	40 e0       	ldi	r20, 0x00	; 0
     756:	6a e6       	ldi	r22, 0x6A	; 106
     758:	88 e6       	ldi	r24, 0x68	; 104
     75a:	1f df       	rcall	.-450    	; 0x59a <mpu_write_byte>
	// Reset FIFO and DMP
	mpu_write_byte(MPU9250_ADDRESS, USER_CTRL, 0x0C);
     75c:	4c e0       	ldi	r20, 0x0C	; 12
     75e:	6a e6       	ldi	r22, 0x6A	; 106
     760:	88 e6       	ldi	r24, 0x68	; 104
     762:	1b df       	rcall	.-458    	; 0x59a <mpu_write_byte>
     764:	e5 ea       	ldi	r30, 0xA5	; 165
     766:	fe e0       	ldi	r31, 0x0E	; 14
     768:	31 97       	sbiw	r30, 0x01	; 1
     76a:	f1 f7       	brne	.-4      	; 0x768 <mpu_calibrate+0xa0>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <mpu_calibrate+0xa6>
	_delay_ms(15);

	// Configure MPU6050 gyro and accelerometer for bias calculation
	// Set low-pass filter to 188 Hz
	mpu_write_byte(MPU9250_ADDRESS, CONFIG, 0x01);
     76e:	00 00       	nop
     770:	41 e0       	ldi	r20, 0x01	; 1
     772:	6a e1       	ldi	r22, 0x1A	; 26
     774:	88 e6       	ldi	r24, 0x68	; 104
	// Set sample rate to 1 kHz
	mpu_write_byte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);
     776:	11 df       	rcall	.-478    	; 0x59a <mpu_write_byte>
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	69 e1       	ldi	r22, 0x19	; 25
     77c:	88 e6       	ldi	r24, 0x68	; 104
	// Set gyro full-scale to 250 degrees per second, maximum sensitivity
	mpu_write_byte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
     77e:	0d df       	rcall	.-486    	; 0x59a <mpu_write_byte>
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	6b e1       	ldi	r22, 0x1B	; 27
     784:	88 e6       	ldi	r24, 0x68	; 104
	// Set accelerometer full-scale to 2 g, maximum sensitivity
	mpu_write_byte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
     786:	09 df       	rcall	.-494    	; 0x59a <mpu_write_byte>
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	6c e1       	ldi	r22, 0x1C	; 28
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	05 df       	rcall	.-502    	; 0x59a <mpu_write_byte>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384; // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	mpu_write_byte(MPU9250_ADDRESS, USER_CTRL, 0x40);  // Enable FIFO
     790:	40 e4       	ldi	r20, 0x40	; 64
     792:	6a e6       	ldi	r22, 0x6A	; 106
     794:	88 e6       	ldi	r24, 0x68	; 104
     796:	01 df       	rcall	.-510    	; 0x59a <mpu_write_byte>
	// Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in
	// MPU-9150)
	mpu_write_byte(MPU9250_ADDRESS, FIFO_EN, 0x78);
     798:	48 e7       	ldi	r20, 0x78	; 120
     79a:	63 e2       	ldi	r22, 0x23	; 35
     79c:	88 e6       	ldi	r24, 0x68	; 104
     79e:	fd de       	rcall	.-518    	; 0x59a <mpu_write_byte>
     7a0:	8f e0       	ldi	r24, 0x0F	; 15
     7a2:	97 e2       	ldi	r25, 0x27	; 39
     7a4:	01 97       	sbiw	r24, 0x01	; 1
     7a6:	f1 f7       	brne	.-4      	; 0x7a4 <mpu_calibrate+0xdc>
     7a8:	00 c0       	rjmp	.+0      	; 0x7aa <mpu_calibrate+0xe2>
     7aa:	00 00       	nop
	_delay_ms(40);  // accumulate 40 samples in 40 milliseconds = 480 bytes

	// At end of sample accumulation, turn off FIFO sensor read
	// Disable gyro and accelerometer sensors for FIFO
	mpu_write_byte(MPU9250_ADDRESS, FIFO_EN, 0x00);
     7ac:	40 e0       	ldi	r20, 0x00	; 0
     7ae:	63 e2       	ldi	r22, 0x23	; 35
     7b0:	88 e6       	ldi	r24, 0x68	; 104
     7b2:	f3 de       	rcall	.-538    	; 0x59a <mpu_write_byte>
     7b4:	9e 01       	movw	r18, r28
	// Read FIFO sample count
	mpu_read_bytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]);
     7b6:	2f 5f       	subi	r18, 0xFF	; 255
     7b8:	3f 4f       	sbci	r19, 0xFF	; 255
     7ba:	42 e0       	ldi	r20, 0x02	; 2
     7bc:	62 e7       	ldi	r22, 0x72	; 114
     7be:	88 e6       	ldi	r24, 0x68	; 104
     7c0:	48 df       	rcall	.-368    	; 0x652 <mpu_read_bytes>
     7c2:	29 81       	ldd	r18, Y+1	; 0x01
     7c4:	30 e0       	ldi	r19, 0x00	; 0
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	// How many sets of full gyro and accelerometer data for averaging
	packet_count = fifo_count/12;
     7c6:	32 2f       	mov	r19, r18
     7c8:	22 27       	eor	r18, r18
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	28 2b       	or	r18, r24
     7ce:	ab ea       	ldi	r26, 0xAB	; 171
     7d0:	ba ea       	ldi	r27, 0xAA	; 170
     7d2:	0e 94 2a 0c 	call	0x1854	; 0x1854 <__umulhisi3>
     7d6:	1c 01       	movw	r2, r24
     7d8:	36 94       	lsr	r3
     7da:	27 94       	ror	r2
     7dc:	36 94       	lsr	r3
     7de:	27 94       	ror	r2
     7e0:	36 94       	lsr	r3
     7e2:	27 94       	ror	r2
     7e4:	21 14       	cp	r2, r1
     7e6:	31 04       	cpc	r3, r1

	for (ii = 0; ii < packet_count; ii++)
     7e8:	09 f4       	brne	.+2      	; 0x7ec <mpu_calibrate+0x124>
     7ea:	91 c0       	rjmp	.+290    	; 0x90e <mpu_calibrate+0x246>
     7ec:	1c 8e       	std	Y+28, r1	; 0x1c
     7ee:	1d 8e       	std	Y+29, r1	; 0x1d
     7f0:	1e 8e       	std	Y+30, r1	; 0x1e
     7f2:	1f 8e       	std	Y+31, r1	; 0x1f
     7f4:	18 a2       	std	Y+32, r1	; 0x20
     7f6:	19 a2       	std	Y+33, r1	; 0x21
     7f8:	1a a2       	std	Y+34, r1	; 0x22
     7fa:	1b a2       	std	Y+35, r1	; 0x23
     7fc:	1c a2       	std	Y+36, r1	; 0x24
     7fe:	1d a2       	std	Y+37, r1	; 0x25
     800:	1e a2       	std	Y+38, r1	; 0x26
     802:	1f a2       	std	Y+39, r1	; 0x27
     804:	41 2c       	mov	r4, r1
     806:	51 2c       	mov	r5, r1
     808:	32 01       	movw	r6, r4
     80a:	81 2c       	mov	r8, r1
     80c:	91 2c       	mov	r9, r1
     80e:	54 01       	movw	r10, r8
     810:	c1 2c       	mov	r12, r1
     812:	d1 2c       	mov	r13, r1
     814:	76 01       	movw	r14, r12
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	9e 01       	movw	r18, r28
	{
		int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
		// Read data for averaging
		mpu_read_bytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]);
     81c:	2f 5f       	subi	r18, 0xFF	; 255
     81e:	3f 4f       	sbci	r19, 0xFF	; 255
     820:	4c e0       	ldi	r20, 0x0C	; 12
     822:	64 e7       	ldi	r22, 0x74	; 116
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	15 df       	rcall	.-470    	; 0x652 <mpu_read_bytes>
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	90 e0       	ldi	r25, 0x00	; 0
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  );
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]);

		// Sum individual signed 16-bit biases to get accumulated signed 32-bit
		// biases.
		accel_bias[0] += (int32_t) accel_temp[0];
     82c:	98 2f       	mov	r25, r24
     82e:	88 27       	eor	r24, r24
     830:	2a 81       	ldd	r18, Y+2	; 0x02
     832:	82 2b       	or	r24, r18
     834:	09 2e       	mov	r0, r25
     836:	00 0c       	add	r0, r0
     838:	aa 0b       	sbc	r26, r26
     83a:	bb 0b       	sbc	r27, r27
     83c:	48 0e       	add	r4, r24
     83e:	59 1e       	adc	r5, r25
     840:	6a 1e       	adc	r6, r26
     842:	7b 1e       	adc	r7, r27
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	90 e0       	ldi	r25, 0x00	; 0
		accel_bias[1] += (int32_t) accel_temp[1];
     848:	98 2f       	mov	r25, r24
     84a:	88 27       	eor	r24, r24
     84c:	2c 81       	ldd	r18, Y+4	; 0x04
     84e:	82 2b       	or	r24, r18
     850:	09 2e       	mov	r0, r25
     852:	00 0c       	add	r0, r0
     854:	aa 0b       	sbc	r26, r26
     856:	bb 0b       	sbc	r27, r27
     858:	88 0e       	add	r8, r24
     85a:	99 1e       	adc	r9, r25
     85c:	aa 1e       	adc	r10, r26
     85e:	bb 1e       	adc	r11, r27
     860:	8d 81       	ldd	r24, Y+5	; 0x05
     862:	90 e0       	ldi	r25, 0x00	; 0
		accel_bias[2] += (int32_t) accel_temp[2];
     864:	98 2f       	mov	r25, r24
     866:	88 27       	eor	r24, r24
     868:	2e 81       	ldd	r18, Y+6	; 0x06
     86a:	82 2b       	or	r24, r18
     86c:	09 2e       	mov	r0, r25
     86e:	00 0c       	add	r0, r0
     870:	aa 0b       	sbc	r26, r26
     872:	bb 0b       	sbc	r27, r27
     874:	c8 0e       	add	r12, r24
     876:	d9 1e       	adc	r13, r25
     878:	ea 1e       	adc	r14, r26
     87a:	fb 1e       	adc	r15, r27
     87c:	8f 81       	ldd	r24, Y+7	; 0x07
     87e:	90 e0       	ldi	r25, 0x00	; 0
		gyro_bias[0]  += (int32_t) gyro_temp[0];
     880:	98 2f       	mov	r25, r24
     882:	88 27       	eor	r24, r24
     884:	28 85       	ldd	r18, Y+8	; 0x08
     886:	82 2b       	or	r24, r18
     888:	09 2e       	mov	r0, r25
     88a:	00 0c       	add	r0, r0
     88c:	aa 0b       	sbc	r26, r26
     88e:	bb 0b       	sbc	r27, r27
     890:	2c 8d       	ldd	r18, Y+28	; 0x1c
     892:	3d 8d       	ldd	r19, Y+29	; 0x1d
     894:	4e 8d       	ldd	r20, Y+30	; 0x1e
     896:	5f 8d       	ldd	r21, Y+31	; 0x1f
     898:	28 0f       	add	r18, r24
     89a:	39 1f       	adc	r19, r25
     89c:	4a 1f       	adc	r20, r26
     89e:	5b 1f       	adc	r21, r27
     8a0:	2c 8f       	std	Y+28, r18	; 0x1c
     8a2:	3d 8f       	std	Y+29, r19	; 0x1d
     8a4:	4e 8f       	std	Y+30, r20	; 0x1e
     8a6:	5f 8f       	std	Y+31, r21	; 0x1f
     8a8:	89 85       	ldd	r24, Y+9	; 0x09
     8aa:	90 e0       	ldi	r25, 0x00	; 0
		gyro_bias[1]  += (int32_t) gyro_temp[1];
     8ac:	98 2f       	mov	r25, r24
     8ae:	88 27       	eor	r24, r24
     8b0:	2a 85       	ldd	r18, Y+10	; 0x0a
     8b2:	82 2b       	or	r24, r18
     8b4:	09 2e       	mov	r0, r25
     8b6:	00 0c       	add	r0, r0
     8b8:	aa 0b       	sbc	r26, r26
     8ba:	bb 0b       	sbc	r27, r27
     8bc:	28 a1       	ldd	r18, Y+32	; 0x20
     8be:	39 a1       	ldd	r19, Y+33	; 0x21
     8c0:	4a a1       	ldd	r20, Y+34	; 0x22
     8c2:	5b a1       	ldd	r21, Y+35	; 0x23
     8c4:	28 0f       	add	r18, r24
     8c6:	39 1f       	adc	r19, r25
     8c8:	4a 1f       	adc	r20, r26
     8ca:	5b 1f       	adc	r21, r27
     8cc:	28 a3       	std	Y+32, r18	; 0x20
     8ce:	39 a3       	std	Y+33, r19	; 0x21
     8d0:	4a a3       	std	Y+34, r20	; 0x22
     8d2:	5b a3       	std	Y+35, r21	; 0x23
     8d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d6:	90 e0       	ldi	r25, 0x00	; 0
		gyro_bias[2]  += (int32_t) gyro_temp[2];
     8d8:	98 2f       	mov	r25, r24
     8da:	88 27       	eor	r24, r24
     8dc:	2c 85       	ldd	r18, Y+12	; 0x0c
     8de:	82 2b       	or	r24, r18
     8e0:	09 2e       	mov	r0, r25
     8e2:	00 0c       	add	r0, r0
     8e4:	aa 0b       	sbc	r26, r26
     8e6:	bb 0b       	sbc	r27, r27
     8e8:	2c a1       	ldd	r18, Y+36	; 0x24
     8ea:	3d a1       	ldd	r19, Y+37	; 0x25
     8ec:	4e a1       	ldd	r20, Y+38	; 0x26
     8ee:	5f a1       	ldd	r21, Y+39	; 0x27
     8f0:	28 0f       	add	r18, r24
     8f2:	39 1f       	adc	r19, r25
     8f4:	4a 1f       	adc	r20, r26
     8f6:	5b 1f       	adc	r21, r27
     8f8:	2c a3       	std	Y+36, r18	; 0x24
     8fa:	3d a3       	std	Y+37, r19	; 0x25
     8fc:	4e a3       	std	Y+38, r20	; 0x26
     8fe:	5f a3       	std	Y+39, r21	; 0x27
     900:	0f 5f       	subi	r16, 0xFF	; 255
     902:	1f 4f       	sbci	r17, 0xFF	; 255
	mpu_read_bytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]);
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	// How many sets of full gyro and accelerometer data for averaging
	packet_count = fifo_count/12;

	for (ii = 0; ii < packet_count; ii++)
     904:	20 16       	cp	r2, r16
     906:	31 06       	cpc	r3, r17
     908:	09 f0       	breq	.+2      	; 0x90c <mpu_calibrate+0x244>
     90a:	87 cf       	rjmp	.-242    	; 0x81a <mpu_calibrate+0x152>
     90c:	15 c0       	rjmp	.+42     	; 0x938 <mpu_calibrate+0x270>
     90e:	1c 8e       	std	Y+28, r1	; 0x1c
     910:	1d 8e       	std	Y+29, r1	; 0x1d
// loads the resulting offsets into accelerometer and gyro bias registers.
void mpu_calibrate(float * gyroBias, float * accelBias)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
     912:	1e 8e       	std	Y+30, r1	; 0x1e
     914:	1f 8e       	std	Y+31, r1	; 0x1f
     916:	18 a2       	std	Y+32, r1	; 0x20
     918:	19 a2       	std	Y+33, r1	; 0x21
     91a:	1a a2       	std	Y+34, r1	; 0x22
     91c:	1b a2       	std	Y+35, r1	; 0x23
     91e:	1c a2       	std	Y+36, r1	; 0x24
     920:	1d a2       	std	Y+37, r1	; 0x25
     922:	1e a2       	std	Y+38, r1	; 0x26
     924:	1f a2       	std	Y+39, r1	; 0x27
     926:	41 2c       	mov	r4, r1
     928:	51 2c       	mov	r5, r1
     92a:	32 01       	movw	r6, r4
     92c:	81 2c       	mov	r8, r1
     92e:	91 2c       	mov	r9, r1
     930:	54 01       	movw	r10, r8
     932:	c1 2c       	mov	r12, r1
     934:	d1 2c       	mov	r13, r1
     936:	76 01       	movw	r14, r12
     938:	81 01       	movw	r16, r2
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
	}
	// Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
	accel_bias[0] /= (int32_t) packet_count;
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	08 a7       	std	Y+40, r16	; 0x28
     940:	19 a7       	std	Y+41, r17	; 0x29
     942:	2a a7       	std	Y+42, r18	; 0x2a
     944:	3b a7       	std	Y+43, r19	; 0x2b
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	a9 01       	movw	r20, r18
     94c:	98 01       	movw	r18, r16
     94e:	66 d7       	rcall	.+3788   	; 0x181c <__divmodsi4>
     950:	2c a7       	std	Y+44, r18	; 0x2c
     952:	3d a7       	std	Y+45, r19	; 0x2d
     954:	4e a7       	std	Y+46, r20	; 0x2e
     956:	5f a7       	std	Y+47, r21	; 0x2f
     958:	28 af       	std	Y+56, r18	; 0x38
     95a:	39 af       	std	Y+57, r19	; 0x39
     95c:	4a af       	std	Y+58, r20	; 0x3a
     95e:	5b af       	std	Y+59, r21	; 0x3b
     960:	c5 01       	movw	r24, r10
	accel_bias[1] /= (int32_t) packet_count;
     962:	b4 01       	movw	r22, r8
     964:	28 a5       	ldd	r18, Y+40	; 0x28
     966:	39 a5       	ldd	r19, Y+41	; 0x29
     968:	4a a5       	ldd	r20, Y+42	; 0x2a
     96a:	5b a5       	ldd	r21, Y+43	; 0x2b
     96c:	57 d7       	rcall	.+3758   	; 0x181c <__divmodsi4>
     96e:	28 ab       	std	Y+48, r18	; 0x30
     970:	39 ab       	std	Y+49, r19	; 0x31
     972:	4a ab       	std	Y+50, r20	; 0x32
     974:	5b ab       	std	Y+51, r21	; 0x33
     976:	2c af       	std	Y+60, r18	; 0x3c
     978:	3d af       	std	Y+61, r19	; 0x3d
     97a:	4e af       	std	Y+62, r20	; 0x3e
     97c:	5f af       	std	Y+63, r21	; 0x3f
	accel_bias[2] /= (int32_t) packet_count;
     97e:	c7 01       	movw	r24, r14
     980:	b6 01       	movw	r22, r12
     982:	28 a5       	ldd	r18, Y+40	; 0x28
     984:	39 a5       	ldd	r19, Y+41	; 0x29
     986:	4a a5       	ldd	r20, Y+42	; 0x2a
     988:	5b a5       	ldd	r21, Y+43	; 0x2b
     98a:	48 d7       	rcall	.+3728   	; 0x181c <__divmodsi4>
     98c:	69 01       	movw	r12, r18
     98e:	7a 01       	movw	r14, r20
	gyro_bias[0]  /= (int32_t) packet_count;
     990:	6c 8d       	ldd	r22, Y+28	; 0x1c
     992:	7d 8d       	ldd	r23, Y+29	; 0x1d
     994:	8e 8d       	ldd	r24, Y+30	; 0x1e
     996:	9f 8d       	ldd	r25, Y+31	; 0x1f
     998:	28 a5       	ldd	r18, Y+40	; 0x28
     99a:	39 a5       	ldd	r19, Y+41	; 0x29
     99c:	4a a5       	ldd	r20, Y+42	; 0x2a
     99e:	5b a5       	ldd	r21, Y+43	; 0x2b
     9a0:	3d d7       	rcall	.+3706   	; 0x181c <__divmodsi4>
     9a2:	49 01       	movw	r8, r18
     9a4:	5a 01       	movw	r10, r20
	gyro_bias[1]  /= (int32_t) packet_count;
     9a6:	68 a1       	ldd	r22, Y+32	; 0x20
     9a8:	79 a1       	ldd	r23, Y+33	; 0x21
     9aa:	8a a1       	ldd	r24, Y+34	; 0x22
     9ac:	9b a1       	ldd	r25, Y+35	; 0x23
     9ae:	28 a5       	ldd	r18, Y+40	; 0x28
     9b0:	39 a5       	ldd	r19, Y+41	; 0x29
     9b2:	4a a5       	ldd	r20, Y+42	; 0x2a
     9b4:	5b a5       	ldd	r21, Y+43	; 0x2b
     9b6:	32 d7       	rcall	.+3684   	; 0x181c <__divmodsi4>
     9b8:	29 01       	movw	r4, r18
     9ba:	3a 01       	movw	r6, r20
     9bc:	6c a1       	ldd	r22, Y+36	; 0x24
	gyro_bias[2]  /= (int32_t) packet_count;
     9be:	7d a1       	ldd	r23, Y+37	; 0x25
     9c0:	8e a1       	ldd	r24, Y+38	; 0x26
     9c2:	9f a1       	ldd	r25, Y+39	; 0x27
     9c4:	28 a5       	ldd	r18, Y+40	; 0x28
     9c6:	39 a5       	ldd	r19, Y+41	; 0x29
     9c8:	4a a5       	ldd	r20, Y+42	; 0x2a
     9ca:	5b a5       	ldd	r21, Y+43	; 0x2b
     9cc:	27 d7       	rcall	.+3662   	; 0x181c <__divmodsi4>
     9ce:	2c 8f       	std	Y+28, r18	; 0x1c
     9d0:	3d 8f       	std	Y+29, r19	; 0x1d
     9d2:	4e 8f       	std	Y+30, r20	; 0x1e
     9d4:	5f 8f       	std	Y+31, r21	; 0x1f
     9d6:	1c 14       	cp	r1, r12
     9d8:	1d 04       	cpc	r1, r13

	// Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
	if (accel_bias[2] > 0L)
     9da:	1e 04       	cpc	r1, r14
     9dc:	1f 04       	cpc	r1, r15
     9de:	2c f4       	brge	.+10     	; 0x9ea <mpu_calibrate+0x322>
     9e0:	10 e4       	ldi	r17, 0x40	; 64
     9e2:	d1 1a       	sub	r13, r17
	{
		accel_bias[2] -= (int32_t) accelsensitivity;
     9e4:	e1 08       	sbc	r14, r1
     9e6:	f1 08       	sbc	r15, r1
     9e8:	04 c0       	rjmp	.+8      	; 0x9f2 <mpu_calibrate+0x32a>
     9ea:	20 e4       	ldi	r18, 0x40	; 64
     9ec:	d2 0e       	add	r13, r18
	}
	else
	{
		accel_bias[2] += (int32_t) accelsensitivity;
     9ee:	e1 1c       	adc	r14, r1
     9f0:	f1 1c       	adc	r15, r1
     9f2:	88 27       	eor	r24, r24
     9f4:	99 27       	eor	r25, r25

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input
	// format.
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF;
     9f6:	dc 01       	movw	r26, r24
     9f8:	88 19       	sub	r24, r8
     9fa:	99 09       	sbc	r25, r9
     9fc:	aa 09       	sbc	r26, r10
     9fe:	bb 09       	sbc	r27, r11
     a00:	1a f4       	brpl	.+6      	; 0xa08 <mpu_calibrate+0x340>
     a02:	03 96       	adiw	r24, 0x03	; 3
     a04:	a1 1d       	adc	r26, r1
     a06:	b1 1d       	adc	r27, r1
     a08:	b5 95       	asr	r27
     a0a:	a7 95       	ror	r26
     a0c:	97 95       	ror	r25
     a0e:	87 95       	ror	r24
     a10:	b5 95       	asr	r27
     a12:	a7 95       	ror	r26
     a14:	97 95       	ror	r25
     a16:	87 95       	ror	r24
     a18:	49 2f       	mov	r20, r25
     a1a:	5a 2f       	mov	r21, r26
     a1c:	6b 2f       	mov	r22, r27
     a1e:	77 27       	eor	r23, r23
     a20:	67 fd       	sbrc	r22, 7
     a22:	7a 95       	dec	r23
     a24:	49 83       	std	Y+1, r20	; 0x01
     a26:	8a 83       	std	Y+2, r24	; 0x02
     a28:	88 27       	eor	r24, r24
	// Biases are additive, so change sign on calculated average gyro biases
	data[1] = (-gyro_bias[0]/4)       & 0xFF;
     a2a:	99 27       	eor	r25, r25
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
     a2c:	dc 01       	movw	r26, r24
     a2e:	84 19       	sub	r24, r4
     a30:	95 09       	sbc	r25, r5
     a32:	a6 09       	sbc	r26, r6
     a34:	b7 09       	sbc	r27, r7
     a36:	1a f4       	brpl	.+6      	; 0xa3e <mpu_calibrate+0x376>
     a38:	03 96       	adiw	r24, 0x03	; 3
     a3a:	a1 1d       	adc	r26, r1
     a3c:	b1 1d       	adc	r27, r1
     a3e:	b5 95       	asr	r27
     a40:	a7 95       	ror	r26
     a42:	97 95       	ror	r25
     a44:	87 95       	ror	r24
     a46:	b5 95       	asr	r27
     a48:	a7 95       	ror	r26
     a4a:	97 95       	ror	r25
     a4c:	87 95       	ror	r24
     a4e:	9b 83       	std	Y+3, r25	; 0x03
     a50:	8c 83       	std	Y+4, r24	; 0x04
     a52:	8c 8d       	ldd	r24, Y+28	; 0x1c
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
     a54:	9d 8d       	ldd	r25, Y+29	; 0x1d
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
     a56:	ae 8d       	ldd	r26, Y+30	; 0x1e
     a58:	bf 8d       	ldd	r27, Y+31	; 0x1f
     a5a:	b0 95       	com	r27
     a5c:	a0 95       	com	r26
     a5e:	90 95       	com	r25
     a60:	81 95       	neg	r24
     a62:	9f 4f       	sbci	r25, 0xFF	; 255
     a64:	af 4f       	sbci	r26, 0xFF	; 255
     a66:	bf 4f       	sbci	r27, 0xFF	; 255
     a68:	1a f4       	brpl	.+6      	; 0xa70 <mpu_calibrate+0x3a8>
     a6a:	03 96       	adiw	r24, 0x03	; 3
     a6c:	a1 1d       	adc	r26, r1
     a6e:	b1 1d       	adc	r27, r1
     a70:	b5 95       	asr	r27
     a72:	a7 95       	ror	r26
     a74:	97 95       	ror	r25
     a76:	87 95       	ror	r24
     a78:	b5 95       	asr	r27
     a7a:	a7 95       	ror	r26
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
     a7c:	97 95       	ror	r25

	// Push gyro biases to hardware registers
	mpu_write_byte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
     a7e:	87 95       	ror	r24
     a80:	9d 83       	std	Y+5, r25	; 0x05
     a82:	8e 83       	std	Y+6, r24	; 0x06
	mpu_write_byte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
     a84:	63 e1       	ldi	r22, 0x13	; 19
     a86:	88 e6       	ldi	r24, 0x68	; 104
     a88:	88 dd       	rcall	.-1264   	; 0x59a <mpu_write_byte>
     a8a:	4a 81       	ldd	r20, Y+2	; 0x02
	mpu_write_byte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
     a8c:	64 e1       	ldi	r22, 0x14	; 20
     a8e:	88 e6       	ldi	r24, 0x68	; 104
     a90:	84 dd       	rcall	.-1272   	; 0x59a <mpu_write_byte>
     a92:	4b 81       	ldd	r20, Y+3	; 0x03
     a94:	65 e1       	ldi	r22, 0x15	; 21
	mpu_write_byte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
     a96:	88 e6       	ldi	r24, 0x68	; 104
     a98:	80 dd       	rcall	.-1280   	; 0x59a <mpu_write_byte>
     a9a:	4c 81       	ldd	r20, Y+4	; 0x04
     a9c:	66 e1       	ldi	r22, 0x16	; 22
	mpu_write_byte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
     a9e:	88 e6       	ldi	r24, 0x68	; 104
     aa0:	7c dd       	rcall	.-1288   	; 0x59a <mpu_write_byte>
     aa2:	4d 81       	ldd	r20, Y+5	; 0x05
     aa4:	67 e1       	ldi	r22, 0x17	; 23
	mpu_write_byte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
     aa6:	88 e6       	ldi	r24, 0x68	; 104
     aa8:	78 dd       	rcall	.-1296   	; 0x59a <mpu_write_byte>
     aaa:	4e 81       	ldd	r20, Y+6	; 0x06
     aac:	68 e1       	ldi	r22, 0x18	; 24
     aae:	88 e6       	ldi	r24, 0x68	; 104

	// Output scaled gyro biases for display in the main program
	gyroBias[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
     ab0:	74 dd       	rcall	.-1304   	; 0x59a <mpu_write_byte>
     ab2:	c5 01       	movw	r24, r10
     ab4:	b4 01       	movw	r22, r8
     ab6:	3a d2       	rcall	.+1140   	; 0xf2c <__floatsisf>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	43 e0       	ldi	r20, 0x03	; 3
     abe:	53 e4       	ldi	r21, 0x43	; 67
     ac0:	cb d1       	rcall	.+918    	; 0xe58 <__divsf3>
     ac2:	ac a9       	ldd	r26, Y+52	; 0x34
     ac4:	bd a9       	ldd	r27, Y+53	; 0x35
     ac6:	6d 93       	st	X+, r22
     ac8:	7d 93       	st	X+, r23
     aca:	8d 93       	st	X+, r24
     acc:	9c 93       	st	X, r25
	gyroBias[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
     ace:	13 97       	sbiw	r26, 0x03	; 3
     ad0:	c3 01       	movw	r24, r6
     ad2:	b2 01       	movw	r22, r4
     ad4:	2b d2       	rcall	.+1110   	; 0xf2c <__floatsisf>
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	43 e0       	ldi	r20, 0x03	; 3
     adc:	53 e4       	ldi	r21, 0x43	; 67
     ade:	bc d1       	rcall	.+888    	; 0xe58 <__divsf3>
     ae0:	ec a9       	ldd	r30, Y+52	; 0x34
     ae2:	fd a9       	ldd	r31, Y+53	; 0x35
     ae4:	64 83       	std	Z+4, r22	; 0x04
     ae6:	75 83       	std	Z+5, r23	; 0x05
     ae8:	86 83       	std	Z+6, r24	; 0x06
     aea:	97 83       	std	Z+7, r25	; 0x07
	gyroBias[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
     aec:	6c 8d       	ldd	r22, Y+28	; 0x1c
     aee:	7d 8d       	ldd	r23, Y+29	; 0x1d
     af0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     af2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     af4:	1b d2       	rcall	.+1078   	; 0xf2c <__floatsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	43 e0       	ldi	r20, 0x03	; 3
     afc:	53 e4       	ldi	r21, 0x43	; 67
     afe:	ac d1       	rcall	.+856    	; 0xe58 <__divsf3>
     b00:	ac a9       	ldd	r26, Y+52	; 0x34
     b02:	bd a9       	ldd	r27, Y+53	; 0x35
     b04:	18 96       	adiw	r26, 0x08	; 8
     b06:	6d 93       	st	X+, r22
     b08:	7d 93       	st	X+, r23
     b0a:	8d 93       	st	X+, r24
     b0c:	9c 93       	st	X, r25
     b0e:	1b 97       	sbiw	r26, 0x0b	; 11
     b10:	9e 01       	movw	r18, r28
	// the accelerometer biases calculated above must be divided by 8.

	// A place to hold the factory accelerometer trim biases
	int32_t accel_bias_reg[3] = {0, 0, 0};
	// Read factory accelerometer trim values
	mpu_read_bytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]);
     b12:	2f 5f       	subi	r18, 0xFF	; 255
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	42 e0       	ldi	r20, 0x02	; 2
     b18:	67 e7       	ldi	r22, 0x77	; 119
     b1a:	88 e6       	ldi	r24, 0x68	; 104
     b1c:	9a dd       	rcall	.-1228   	; 0x652 <mpu_read_bytes>
     b1e:	49 80       	ldd	r4, Y+1	; 0x01
     b20:	51 2c       	mov	r5, r1
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
     b22:	54 2c       	mov	r5, r4
     b24:	44 24       	eor	r4, r4
     b26:	8a 81       	ldd	r24, Y+2	; 0x02
     b28:	48 2a       	or	r4, r24
     b2a:	05 2c       	mov	r0, r5
     b2c:	00 0c       	add	r0, r0
     b2e:	66 08       	sbc	r6, r6
     b30:	77 08       	sbc	r7, r7
     b32:	4d 86       	std	Y+13, r4	; 0x0d
     b34:	5e 86       	std	Y+14, r5	; 0x0e
     b36:	6f 86       	std	Y+15, r6	; 0x0f
     b38:	78 8a       	std	Y+16, r7	; 0x10
     b3a:	9e 01       	movw	r18, r28
	mpu_read_bytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
     b3c:	2f 5f       	subi	r18, 0xFF	; 255
     b3e:	3f 4f       	sbci	r19, 0xFF	; 255
     b40:	42 e0       	ldi	r20, 0x02	; 2
     b42:	6a e7       	ldi	r22, 0x7A	; 122
     b44:	88 e6       	ldi	r24, 0x68	; 104
     b46:	85 dd       	rcall	.-1270   	; 0x652 <mpu_read_bytes>
     b48:	89 80       	ldd	r8, Y+1	; 0x01
     b4a:	91 2c       	mov	r9, r1
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
     b4c:	98 2c       	mov	r9, r8
     b4e:	88 24       	eor	r8, r8
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	88 2a       	or	r8, r24
     b54:	09 2c       	mov	r0, r9
     b56:	00 0c       	add	r0, r0
     b58:	aa 08       	sbc	r10, r10
     b5a:	bb 08       	sbc	r11, r11
     b5c:	89 8a       	std	Y+17, r8	; 0x11
     b5e:	9a 8a       	std	Y+18, r9	; 0x12
     b60:	ab 8a       	std	Y+19, r10	; 0x13
     b62:	bc 8a       	std	Y+20, r11	; 0x14
     b64:	9e 01       	movw	r18, r28
     b66:	2f 5f       	subi	r18, 0xFF	; 255
	mpu_read_bytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	42 e0       	ldi	r20, 0x02	; 2
     b6c:	6d e7       	ldi	r22, 0x7D	; 125
     b6e:	88 e6       	ldi	r24, 0x68	; 104
     b70:	70 dd       	rcall	.-1312   	; 0x652 <mpu_read_bytes>
     b72:	49 81       	ldd	r20, Y+1	; 0x01
     b74:	50 e0       	ldi	r21, 0x00	; 0
     b76:	54 2f       	mov	r21, r20
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
     b78:	44 27       	eor	r20, r20
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	48 2b       	or	r20, r24
     b7e:	05 2e       	mov	r0, r21
     b80:	00 0c       	add	r0, r0
     b82:	66 0b       	sbc	r22, r22
     b84:	77 0b       	sbc	r23, r23
     b86:	4d 8b       	std	Y+21, r20	; 0x15
     b88:	5e 8b       	std	Y+22, r21	; 0x16
     b8a:	6f 8b       	std	Y+23, r22	; 0x17
     b8c:	78 8f       	std	Y+24, r23	; 0x18
     b8e:	19 8e       	std	Y+25, r1	; 0x19
     b90:	1a 8e       	std	Y+26, r1	; 0x1a
     b92:	1b 8e       	std	Y+27, r1	; 0x1b

	// Define mask for temperature compensation bit 0 of lower byte of
	// accelerometer bias registers
	uint32_t mask = 1uL;
	// Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};
     b94:	fe 01       	movw	r30, r28
     b96:	3d 96       	adiw	r30, 0x0d	; 13
     b98:	de 01       	movw	r26, r28
     b9a:	59 96       	adiw	r26, 0x19	; 25
     b9c:	cd 01       	movw	r24, r26
     b9e:	33 24       	eor	r3, r3
     ba0:	33 94       	inc	r3
     ba2:	01 91       	ld	r16, Z+
	for (ii = 0; ii < 3; ii++)
	{
		// If temperature compensation bit is set, record that fact in mask_bit
		if ((accel_bias_reg[ii] & mask))
		{
			mask_bit[ii] = 0x01;
     ba4:	11 91       	ld	r17, Z+
     ba6:	21 91       	ld	r18, Z+
	uint8_t mask_bit[3] = {0, 0, 0};

	for (ii = 0; ii < 3; ii++)
	{
		// If temperature compensation bit is set, record that fact in mask_bit
		if ((accel_bias_reg[ii] & mask))
     ba8:	31 91       	ld	r19, Z+
     baa:	00 fd       	sbrc	r16, 0
     bac:	3c 92       	st	X, r3
     bae:	11 96       	adiw	r26, 0x01	; 1
     bb0:	e8 17       	cp	r30, r24
		{
			mask_bit[ii] = 0x01;
     bb2:	f9 07       	cpc	r31, r25
     bb4:	b1 f7       	brne	.-20     	; 0xba2 <mpu_calibrate+0x4da>
	// accelerometer bias registers
	uint32_t mask = 1uL;
	// Define array to hold mask bit for each accelerometer bias axis
	uint8_t mask_bit[3] = {0, 0, 0};

	for (ii = 0; ii < 3; ii++)
     bb6:	8c a5       	ldd	r24, Y+44	; 0x2c
     bb8:	9d a5       	ldd	r25, Y+45	; 0x2d
     bba:	ae a5       	ldd	r26, Y+46	; 0x2e

	// Construct total accelerometer bias, including calculated average
	// accelerometer bias from above
	// Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g
	// (16 g full scale)
	accel_bias_reg[0] -= (accel_bias[0]/8);
     bbc:	bf a5       	ldd	r27, Y+47	; 0x2f
     bbe:	08 ad       	ldd	r16, Y+56	; 0x38
     bc0:	19 ad       	ldd	r17, Y+57	; 0x39
     bc2:	2a ad       	ldd	r18, Y+58	; 0x3a
     bc4:	3b ad       	ldd	r19, Y+59	; 0x3b
     bc6:	33 23       	and	r19, r19
     bc8:	1c f4       	brge	.+6      	; 0xbd0 <mpu_calibrate+0x508>
     bca:	07 96       	adiw	r24, 0x07	; 7
     bcc:	a1 1d       	adc	r26, r1
     bce:	b1 1d       	adc	r27, r1
     bd0:	68 94       	set
     bd2:	12 f8       	bld	r1, 2
     bd4:	b5 95       	asr	r27
     bd6:	a7 95       	ror	r26
     bd8:	97 95       	ror	r25
     bda:	87 95       	ror	r24
     bdc:	16 94       	lsr	r1
     bde:	d1 f7       	brne	.-12     	; 0xbd4 <mpu_calibrate+0x50c>
     be0:	48 1a       	sub	r4, r24
     be2:	59 0a       	sbc	r5, r25
     be4:	6a 0a       	sbc	r6, r26
     be6:	7b 0a       	sbc	r7, r27
     be8:	88 a9       	ldd	r24, Y+48	; 0x30
     bea:	99 a9       	ldd	r25, Y+49	; 0x31
     bec:	aa a9       	ldd	r26, Y+50	; 0x32
	accel_bias_reg[1] -= (accel_bias[1]/8);
     bee:	bb a9       	ldd	r27, Y+51	; 0x33
     bf0:	0c ad       	ldd	r16, Y+60	; 0x3c
     bf2:	1d ad       	ldd	r17, Y+61	; 0x3d
     bf4:	2e ad       	ldd	r18, Y+62	; 0x3e
     bf6:	3f ad       	ldd	r19, Y+63	; 0x3f
     bf8:	33 23       	and	r19, r19
     bfa:	1c f4       	brge	.+6      	; 0xc02 <mpu_calibrate+0x53a>
     bfc:	07 96       	adiw	r24, 0x07	; 7
     bfe:	a1 1d       	adc	r26, r1
     c00:	b1 1d       	adc	r27, r1
     c02:	68 94       	set
     c04:	12 f8       	bld	r1, 2
     c06:	b5 95       	asr	r27
     c08:	a7 95       	ror	r26
     c0a:	97 95       	ror	r25
     c0c:	87 95       	ror	r24
     c0e:	16 94       	lsr	r1
     c10:	d1 f7       	brne	.-12     	; 0xc06 <mpu_calibrate+0x53e>
     c12:	88 1a       	sub	r8, r24
     c14:	99 0a       	sbc	r9, r25
     c16:	aa 0a       	sbc	r10, r26
     c18:	bb 0a       	sbc	r11, r27
     c1a:	d7 01       	movw	r26, r14
     c1c:	c6 01       	movw	r24, r12
     c1e:	ff 20       	and	r15, r15
	accel_bias_reg[2] -= (accel_bias[2]/8);
     c20:	1c f4       	brge	.+6      	; 0xc28 <mpu_calibrate+0x560>
     c22:	07 96       	adiw	r24, 0x07	; 7
     c24:	a1 1d       	adc	r26, r1
     c26:	b1 1d       	adc	r27, r1
     c28:	68 94       	set
     c2a:	12 f8       	bld	r1, 2
     c2c:	b5 95       	asr	r27
     c2e:	a7 95       	ror	r26
     c30:	97 95       	ror	r25
     c32:	87 95       	ror	r24
     c34:	16 94       	lsr	r1
     c36:	d1 f7       	brne	.-12     	; 0xc2c <mpu_calibrate+0x564>
     c38:	8a 01       	movw	r16, r20
     c3a:	9b 01       	movw	r18, r22
     c3c:	08 1b       	sub	r16, r24
     c3e:	19 0b       	sbc	r17, r25
     c40:	2a 0b       	sbc	r18, r26
     c42:	3b 0b       	sbc	r19, r27
     c44:	d9 01       	movw	r26, r18

	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
     c46:	c8 01       	movw	r24, r16
     c48:	77 27       	eor	r23, r23
     c4a:	77 fc       	sbrc	r7, 7
     c4c:	7a 95       	dec	r23
     c4e:	67 2d       	mov	r22, r7
     c50:	56 2d       	mov	r21, r6
	data[1] = (accel_bias_reg[0])      & 0xFF;
	// preserve temperature compensation bit when writing back to accelerometer
	// bias registers
	data[1] = data[1] | mask_bit[0];
     c52:	45 2d       	mov	r20, r5
     c54:	49 83       	std	Y+1, r20	; 0x01
     c56:	29 8d       	ldd	r18, Y+25	; 0x19
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
     c58:	42 2a       	or	r4, r18
	data[3] = (accel_bias_reg[1])      & 0xFF;
	// Preserve temperature compensation bit when writing back to accelerometer
	// bias registers
	data[3] = data[3] | mask_bit[1];
     c5a:	4a 82       	std	Y+2, r4	; 0x02
     c5c:	9b 82       	std	Y+3, r9	; 0x03
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
     c5e:	2a 8d       	ldd	r18, Y+26	; 0x1a
	data[5] = (accel_bias_reg[2])      & 0xFF;
	// Preserve temperature compensation bit when writing back to accelerometer
	// bias registers
	data[5] = data[5] | mask_bit[2];
     c60:	82 2a       	or	r8, r18
     c62:	8c 82       	std	Y+4, r8	; 0x04
     c64:	9d 83       	std	Y+5, r25	; 0x05

	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	mpu_write_byte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
     c66:	2b 8d       	ldd	r18, Y+27	; 0x1b
     c68:	82 2b       	or	r24, r18
     c6a:	8e 83       	std	Y+6, r24	; 0x06
     c6c:	67 e7       	ldi	r22, 0x77	; 119
	mpu_write_byte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
     c6e:	88 e6       	ldi	r24, 0x68	; 104
     c70:	94 dc       	rcall	.-1752   	; 0x59a <mpu_write_byte>
     c72:	4a 81       	ldd	r20, Y+2	; 0x02
     c74:	68 e7       	ldi	r22, 0x78	; 120
	mpu_write_byte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
     c76:	88 e6       	ldi	r24, 0x68	; 104
     c78:	90 dc       	rcall	.-1760   	; 0x59a <mpu_write_byte>
     c7a:	4b 81       	ldd	r20, Y+3	; 0x03
     c7c:	6a e7       	ldi	r22, 0x7A	; 122
	mpu_write_byte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
     c7e:	88 e6       	ldi	r24, 0x68	; 104
     c80:	8c dc       	rcall	.-1768   	; 0x59a <mpu_write_byte>
     c82:	4c 81       	ldd	r20, Y+4	; 0x04
     c84:	6b e7       	ldi	r22, 0x7B	; 123
     c86:	88 e6       	ldi	r24, 0x68	; 104
	mpu_write_byte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
     c88:	88 dc       	rcall	.-1776   	; 0x59a <mpu_write_byte>
     c8a:	4d 81       	ldd	r20, Y+5	; 0x05
     c8c:	6d e7       	ldi	r22, 0x7D	; 125
     c8e:	88 e6       	ldi	r24, 0x68	; 104
	mpu_write_byte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
     c90:	84 dc       	rcall	.-1784   	; 0x59a <mpu_write_byte>
     c92:	4e 81       	ldd	r20, Y+6	; 0x06
     c94:	6e e7       	ldi	r22, 0x7E	; 126
     c96:	88 e6       	ldi	r24, 0x68	; 104

	// Output scaled accelerometer biases for display in the main program
	accelBias[0] = (float)accel_bias[0]/(float)accelsensitivity;
     c98:	80 dc       	rcall	.-1792   	; 0x59a <mpu_write_byte>
     c9a:	6c a5       	ldd	r22, Y+44	; 0x2c
     c9c:	7d a5       	ldd	r23, Y+45	; 0x2d
     c9e:	8e a5       	ldd	r24, Y+46	; 0x2e
     ca0:	9f a5       	ldd	r25, Y+47	; 0x2f
     ca2:	44 d1       	rcall	.+648    	; 0xf2c <__floatsisf>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e8       	ldi	r20, 0x80	; 128
     caa:	58 e3       	ldi	r21, 0x38	; 56
     cac:	cb d1       	rcall	.+918    	; 0x1044 <__mulsf3>
     cae:	ae a9       	ldd	r26, Y+54	; 0x36
     cb0:	bf a9       	ldd	r27, Y+55	; 0x37
     cb2:	6d 93       	st	X+, r22
     cb4:	7d 93       	st	X+, r23
     cb6:	8d 93       	st	X+, r24
     cb8:	9c 93       	st	X, r25
     cba:	13 97       	sbiw	r26, 0x03	; 3
     cbc:	68 a9       	ldd	r22, Y+48	; 0x30
	accelBias[1] = (float)accel_bias[1]/(float)accelsensitivity;
     cbe:	79 a9       	ldd	r23, Y+49	; 0x31
     cc0:	8a a9       	ldd	r24, Y+50	; 0x32
     cc2:	9b a9       	ldd	r25, Y+51	; 0x33
     cc4:	33 d1       	rcall	.+614    	; 0xf2c <__floatsisf>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e8       	ldi	r20, 0x80	; 128
     ccc:	58 e3       	ldi	r21, 0x38	; 56
     cce:	ba d1       	rcall	.+884    	; 0x1044 <__mulsf3>
     cd0:	ee a9       	ldd	r30, Y+54	; 0x36
     cd2:	ff a9       	ldd	r31, Y+55	; 0x37
     cd4:	64 83       	std	Z+4, r22	; 0x04
     cd6:	75 83       	std	Z+5, r23	; 0x05
     cd8:	86 83       	std	Z+6, r24	; 0x06
     cda:	97 83       	std	Z+7, r25	; 0x07
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	25 d1       	rcall	.+586    	; 0xf2c <__floatsisf>
	accelBias[2] = (float)accel_bias[2]/(float)accelsensitivity;
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	40 e8       	ldi	r20, 0x80	; 128
     ce8:	58 e3       	ldi	r21, 0x38	; 56
     cea:	ac d1       	rcall	.+856    	; 0x1044 <__mulsf3>
     cec:	ae a9       	ldd	r26, Y+54	; 0x36
     cee:	bf a9       	ldd	r27, Y+55	; 0x37
     cf0:	18 96       	adiw	r26, 0x08	; 8
     cf2:	6d 93       	st	X+, r22
     cf4:	7d 93       	st	X+, r23
     cf6:	8d 93       	st	X+, r24
     cf8:	9c 93       	st	X, r25
     cfa:	1b 97       	sbiw	r26, 0x0b	; 11
     cfc:	ef 96       	adiw	r28, 0x3f	; 63
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	f8 94       	cli
     d02:	de bf       	out	0x3e, r29	; 62
     d04:	0f be       	out	0x3f, r0	; 63
}
     d06:	cd bf       	out	0x3d, r28	; 61
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	df 90       	pop	r13
     d16:	cf 90       	pop	r12
     d18:	bf 90       	pop	r11
     d1a:	af 90       	pop	r10
     d1c:	9f 90       	pop	r9
     d1e:	8f 90       	pop	r8
     d20:	7f 90       	pop	r7
     d22:	6f 90       	pop	r6
     d24:	5f 90       	pop	r5
     d26:	4f 90       	pop	r4
     d28:	3f 90       	pop	r3
     d2a:	2f 90       	pop	r2
     d2c:	08 95       	ret

00000d2e <main>:
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	c0 54       	subi	r28, 0x40	; 64
#define set_input(portdir, pin) portdir &= ~(1<<pin)



int main(void)
{
     d38:	d1 09       	sbc	r29, r1
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
	
	float gyroBias[3]  = {0, 0, 0},
     d44:	19 82       	std	Y+1, r1	; 0x01
     d46:	1a 82       	std	Y+2, r1	; 0x02
     d48:	1b 82       	std	Y+3, r1	; 0x03
     d4a:	1c 82       	std	Y+4, r1	; 0x04
     d4c:	1d 82       	std	Y+5, r1	; 0x05
     d4e:	1e 82       	std	Y+6, r1	; 0x06
     d50:	1f 82       	std	Y+7, r1	; 0x07
     d52:	18 86       	std	Y+8, r1	; 0x08
     d54:	19 86       	std	Y+9, r1	; 0x09
     d56:	1a 86       	std	Y+10, r1	; 0x0a
     d58:	1b 86       	std	Y+11, r1	; 0x0b
     d5a:	1c 86       	std	Y+12, r1	; 0x0c
	accelBias[3] = {0, 0, 0},
     d5c:	1d 86       	std	Y+13, r1	; 0x0d
     d5e:	1e 86       	std	Y+14, r1	; 0x0e
     d60:	1f 86       	std	Y+15, r1	; 0x0f
     d62:	18 8a       	std	Y+16, r1	; 0x10
     d64:	19 8a       	std	Y+17, r1	; 0x11
     d66:	1a 8a       	std	Y+18, r1	; 0x12
     d68:	1b 8a       	std	Y+19, r1	; 0x13
     d6a:	1c 8a       	std	Y+20, r1	; 0x14
     d6c:	1d 8a       	std	Y+21, r1	; 0x15
     d6e:	1e 8a       	std	Y+22, r1	; 0x16
     d70:	1f 8a       	std	Y+23, r1	; 0x17
     d72:	18 8e       	std	Y+24, r1	; 0x18
	magBias[3]   = {0, 0, 0},
	magScale[3]  = {0, 0, 0};
	
	
	LCD_Init();
     d74:	d2 da       	rcall	.-2652   	; 0x31a <LCD_Init>
	LCD_Clear();
     d76:	f8 da       	rcall	.-2576   	; 0x368 <LCD_Clear>
     d78:	80 e0       	ldi	r24, 0x00	; 0
	LCD_String("Booting...");
     d7a:	91 e0       	ldi	r25, 0x01	; 1
     d7c:	e7 da       	rcall	.-2610   	; 0x34c <LCD_String>
     d7e:	09 9a       	sbi	0x01, 1	; 1
	
	set_output(DDRA, BUZZER);
	set_output(DDRA, LED);
     d80:	08 9a       	sbi	0x01, 0	; 1
	DHT_setup();
     d82:	fd da       	rcall	.-2566   	; 0x37e <DHT_setup>
     d84:	2b da       	rcall	.-2986   	; 0x1dc <i2c_init>
	i2c_init();
     d86:	be 01       	movw	r22, r28
     d88:	63 5f       	subi	r22, 0xF3	; 243
	mpu_calibrate(gyroBias,accelBias);
     d8a:	7f 4f       	sbci	r23, 0xFF	; 255
     d8c:	ce 01       	movw	r24, r28
     d8e:	01 96       	adiw	r24, 0x01	; 1
     d90:	9b dc       	rcall	.-1738   	; 0x6c8 <mpu_calibrate>
     d92:	11 dc       	rcall	.-2014   	; 0x5b6 <mpu_init>
	mpu_init();
     d94:	1d 8e       	std	Y+29, r1	; 0x1d
     d96:	1e 8e       	std	Y+30, r1	; 0x1e
	double temp[1], hum[1];
	char first_line[16];
	char second_line[16];
	uint8_t data;

	temp[0] = hum[0] = 0;
     d98:	1f 8e       	std	Y+31, r1	; 0x1f
     d9a:	18 a2       	std	Y+32, r1	; 0x20
     d9c:	19 8e       	std	Y+25, r1	; 0x19
     d9e:	1a 8e       	std	Y+26, r1	; 0x1a
     da0:	1b 8e       	std	Y+27, r1	; 0x1b
     da2:	1c 8e       	std	Y+28, r1	; 0x1c
     da4:	2f e3       	ldi	r18, 0x3F	; 63
     da6:	8d e0       	ldi	r24, 0x0D	; 13
     da8:	93 e0       	ldi	r25, 0x03	; 3
     daa:	21 50       	subi	r18, 0x01	; 1
     dac:	80 40       	sbci	r24, 0x00	; 0
     dae:	90 40       	sbci	r25, 0x00	; 0
     db0:	e1 f7       	brne	.-8      	; 0xdaa <main+0x7c>
     db2:	00 c0       	rjmp	.+0      	; 0xdb4 <main+0x86>
     db4:	00 00       	nop
     db6:	0f 2e       	mov	r0, r31
     db8:	fb e0       	ldi	r31, 0x0B	; 11
	_delay_ms(1000);
	while (1)
	{
		data = mpu_read_byte(MPU9250_ADDRESS, 0);
		
		sprintf(first_line, "0x%02X :: 0x%02X", MPU9250_ADDRESS, 0);
     dba:	8f 2e       	mov	r8, r31
     dbc:	f1 e0       	ldi	r31, 0x01	; 1
     dbe:	9f 2e       	mov	r9, r31
     dc0:	f0 2d       	mov	r31, r0
     dc2:	6e 01       	movw	r12, r28
     dc4:	21 e2       	ldi	r18, 0x21	; 33
     dc6:	c2 0e       	add	r12, r18
     dc8:	d1 1c       	adc	r13, r1
     dca:	0f 2e       	mov	r0, r31
     dcc:	f5 e1       	ldi	r31, 0x15	; 21
		sprintf(second_line, "0x%02X", data);
     dce:	af 2e       	mov	r10, r31
     dd0:	f1 e0       	ldi	r31, 0x01	; 1
     dd2:	bf 2e       	mov	r11, r31
     dd4:	f0 2d       	mov	r31, r0
     dd6:	7e 01       	movw	r14, r28
     dd8:	81 e3       	ldi	r24, 0x31	; 49
     dda:	e8 0e       	add	r14, r24
     ddc:	f1 1c       	adc	r15, r1
     dde:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t address = 0x00;
	
	_delay_ms(1000);
	while (1)
	{
		data = mpu_read_byte(MPU9250_ADDRESS, 0);
     de0:	88 e6       	ldi	r24, 0x68	; 104
     de2:	c7 db       	rcall	.-2162   	; 0x572 <mpu_read_byte>
     de4:	18 2f       	mov	r17, r24
     de6:	1f 92       	push	r1
     de8:	1f 92       	push	r1
		
		sprintf(first_line, "0x%02X :: 0x%02X", MPU9250_ADDRESS, 0);
     dea:	1f 92       	push	r1
     dec:	88 e6       	ldi	r24, 0x68	; 104
     dee:	8f 93       	push	r24
     df0:	9f 92       	push	r9
     df2:	8f 92       	push	r8
     df4:	df 92       	push	r13
     df6:	cf 92       	push	r12
     df8:	88 d6       	rcall	.+3344   	; 0x1b0a <sprintf>
     dfa:	1f 92       	push	r1
		sprintf(second_line, "0x%02X", data);
     dfc:	1f 93       	push	r17
     dfe:	bf 92       	push	r11
     e00:	af 92       	push	r10
     e02:	ff 92       	push	r15
     e04:	ef 92       	push	r14
     e06:	81 d6       	rcall	.+3330   	; 0x1b0a <sprintf>
		
		output_high(PORTA, LED);
		output_low(PORTA, BUZZER);
     e08:	10 9a       	sbi	0x02, 0	; 2
		DHT_read(temp, hum);
     e0a:	11 98       	cbi	0x02, 1	; 2
     e0c:	be 01       	movw	r22, r28
     e0e:	63 5e       	subi	r22, 0xE3	; 227
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	ce 01       	movw	r24, r28
		sprintf(first_line, "Error!");
		sprintf(second_line, "Temperature!");
		break;
		}*/
		
		LCD_Clear();
     e14:	49 96       	adiw	r24, 0x19	; 25
     e16:	77 db       	rcall	.-2322   	; 0x506 <DHT_read>
		LCD_String(first_line);
     e18:	a7 da       	rcall	.-2738   	; 0x368 <LCD_Clear>
     e1a:	c6 01       	movw	r24, r12
     e1c:	97 da       	rcall	.-2770   	; 0x34c <LCD_String>
		LCD_Command(0xC0); //Second Line
     e1e:	80 ec       	ldi	r24, 0xC0	; 192
     e20:	3c da       	rcall	.-2952   	; 0x29a <LCD_Command>
     e22:	c7 01       	movw	r24, r14
		LCD_String(second_line);
     e24:	93 da       	rcall	.-2778   	; 0x34c <LCD_String>
     e26:	11 50       	subi	r17, 0x01	; 1
     e28:	0f b6       	in	r0, 0x3f	; 63
		
		
		/*_delay_ms(1000);
		output_high(PORTA, BUZZER);
		output_low(PORTA, LED);*/
		if (data == 0xFF || data == 0x00){
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	1e 3f       	cpi	r17, 0xFE	; 254
     e34:	38 f0       	brcs	.+14     	; 0xe44 <main+0x116>
     e36:	87 ea       	ldi	r24, 0xA7	; 167
     e38:	91 e6       	ldi	r25, 0x61	; 97
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <main+0x10c>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <main+0x112>
     e40:	00 00       	nop
     e42:	cd cf       	rjmp	.-102    	; 0xdde <main+0xb0>
     e44:	9f e3       	ldi	r25, 0x3F	; 63
     e46:	2d e0       	ldi	r18, 0x0D	; 13
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	91 50       	subi	r25, 0x01	; 1
     e4c:	20 40       	sbci	r18, 0x00	; 0
     e4e:	80 40       	sbci	r24, 0x00	; 0
     e50:	e1 f7       	brne	.-8      	; 0xe4a <main+0x11c>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <main+0x126>
     e54:	00 00       	nop
     e56:	c3 cf       	rjmp	.-122    	; 0xdde <main+0xb0>

00000e58 <__divsf3>:
     e58:	0c d0       	rcall	.+24     	; 0xe72 <__divsf3x>
     e5a:	ba c0       	rjmp	.+372    	; 0xfd0 <__fp_round>
     e5c:	b2 d0       	rcall	.+356    	; 0xfc2 <__fp_pscB>
     e5e:	40 f0       	brcs	.+16     	; 0xe70 <__divsf3+0x18>
     e60:	a9 d0       	rcall	.+338    	; 0xfb4 <__fp_pscA>
     e62:	30 f0       	brcs	.+12     	; 0xe70 <__divsf3+0x18>
     e64:	21 f4       	brne	.+8      	; 0xe6e <__divsf3+0x16>
     e66:	5f 3f       	cpi	r21, 0xFF	; 255
     e68:	19 f0       	breq	.+6      	; 0xe70 <__divsf3+0x18>
     e6a:	9b c0       	rjmp	.+310    	; 0xfa2 <__fp_inf>
     e6c:	51 11       	cpse	r21, r1
     e6e:	e4 c0       	rjmp	.+456    	; 0x1038 <__fp_szero>
     e70:	9e c0       	rjmp	.+316    	; 0xfae <__fp_nan>

00000e72 <__divsf3x>:
     e72:	bf d0       	rcall	.+382    	; 0xff2 <__fp_split3>
     e74:	98 f3       	brcs	.-26     	; 0xe5c <__divsf3+0x4>

00000e76 <__divsf3_pse>:
     e76:	99 23       	and	r25, r25
     e78:	c9 f3       	breq	.-14     	; 0xe6c <__divsf3+0x14>
     e7a:	55 23       	and	r21, r21
     e7c:	b1 f3       	breq	.-20     	; 0xe6a <__divsf3+0x12>
     e7e:	95 1b       	sub	r25, r21
     e80:	55 0b       	sbc	r21, r21
     e82:	bb 27       	eor	r27, r27
     e84:	aa 27       	eor	r26, r26
     e86:	62 17       	cp	r22, r18
     e88:	73 07       	cpc	r23, r19
     e8a:	84 07       	cpc	r24, r20
     e8c:	38 f0       	brcs	.+14     	; 0xe9c <__divsf3_pse+0x26>
     e8e:	9f 5f       	subi	r25, 0xFF	; 255
     e90:	5f 4f       	sbci	r21, 0xFF	; 255
     e92:	22 0f       	add	r18, r18
     e94:	33 1f       	adc	r19, r19
     e96:	44 1f       	adc	r20, r20
     e98:	aa 1f       	adc	r26, r26
     e9a:	a9 f3       	breq	.-22     	; 0xe86 <__divsf3_pse+0x10>
     e9c:	33 d0       	rcall	.+102    	; 0xf04 <__divsf3_pse+0x8e>
     e9e:	0e 2e       	mov	r0, r30
     ea0:	3a f0       	brmi	.+14     	; 0xeb0 <__divsf3_pse+0x3a>
     ea2:	e0 e8       	ldi	r30, 0x80	; 128
     ea4:	30 d0       	rcall	.+96     	; 0xf06 <__divsf3_pse+0x90>
     ea6:	91 50       	subi	r25, 0x01	; 1
     ea8:	50 40       	sbci	r21, 0x00	; 0
     eaa:	e6 95       	lsr	r30
     eac:	00 1c       	adc	r0, r0
     eae:	ca f7       	brpl	.-14     	; 0xea2 <__divsf3_pse+0x2c>
     eb0:	29 d0       	rcall	.+82     	; 0xf04 <__divsf3_pse+0x8e>
     eb2:	fe 2f       	mov	r31, r30
     eb4:	27 d0       	rcall	.+78     	; 0xf04 <__divsf3_pse+0x8e>
     eb6:	66 0f       	add	r22, r22
     eb8:	77 1f       	adc	r23, r23
     eba:	88 1f       	adc	r24, r24
     ebc:	bb 1f       	adc	r27, r27
     ebe:	26 17       	cp	r18, r22
     ec0:	37 07       	cpc	r19, r23
     ec2:	48 07       	cpc	r20, r24
     ec4:	ab 07       	cpc	r26, r27
     ec6:	b0 e8       	ldi	r27, 0x80	; 128
     ec8:	09 f0       	breq	.+2      	; 0xecc <__divsf3_pse+0x56>
     eca:	bb 0b       	sbc	r27, r27
     ecc:	80 2d       	mov	r24, r0
     ece:	bf 01       	movw	r22, r30
     ed0:	ff 27       	eor	r31, r31
     ed2:	93 58       	subi	r25, 0x83	; 131
     ed4:	5f 4f       	sbci	r21, 0xFF	; 255
     ed6:	2a f0       	brmi	.+10     	; 0xee2 <__divsf3_pse+0x6c>
     ed8:	9e 3f       	cpi	r25, 0xFE	; 254
     eda:	51 05       	cpc	r21, r1
     edc:	68 f0       	brcs	.+26     	; 0xef8 <__divsf3_pse+0x82>
     ede:	61 c0       	rjmp	.+194    	; 0xfa2 <__fp_inf>
     ee0:	ab c0       	rjmp	.+342    	; 0x1038 <__fp_szero>
     ee2:	5f 3f       	cpi	r21, 0xFF	; 255
     ee4:	ec f3       	brlt	.-6      	; 0xee0 <__divsf3_pse+0x6a>
     ee6:	98 3e       	cpi	r25, 0xE8	; 232
     ee8:	dc f3       	brlt	.-10     	; 0xee0 <__divsf3_pse+0x6a>
     eea:	86 95       	lsr	r24
     eec:	77 95       	ror	r23
     eee:	67 95       	ror	r22
     ef0:	b7 95       	ror	r27
     ef2:	f7 95       	ror	r31
     ef4:	9f 5f       	subi	r25, 0xFF	; 255
     ef6:	c9 f7       	brne	.-14     	; 0xeea <__divsf3_pse+0x74>
     ef8:	88 0f       	add	r24, r24
     efa:	91 1d       	adc	r25, r1
     efc:	96 95       	lsr	r25
     efe:	87 95       	ror	r24
     f00:	97 f9       	bld	r25, 7
     f02:	08 95       	ret
     f04:	e1 e0       	ldi	r30, 0x01	; 1
     f06:	66 0f       	add	r22, r22
     f08:	77 1f       	adc	r23, r23
     f0a:	88 1f       	adc	r24, r24
     f0c:	bb 1f       	adc	r27, r27
     f0e:	62 17       	cp	r22, r18
     f10:	73 07       	cpc	r23, r19
     f12:	84 07       	cpc	r24, r20
     f14:	ba 07       	cpc	r27, r26
     f16:	20 f0       	brcs	.+8      	; 0xf20 <__divsf3_pse+0xaa>
     f18:	62 1b       	sub	r22, r18
     f1a:	73 0b       	sbc	r23, r19
     f1c:	84 0b       	sbc	r24, r20
     f1e:	ba 0b       	sbc	r27, r26
     f20:	ee 1f       	adc	r30, r30
     f22:	88 f7       	brcc	.-30     	; 0xf06 <__divsf3_pse+0x90>
     f24:	e0 95       	com	r30
     f26:	08 95       	ret

00000f28 <__floatunsisf>:
     f28:	e8 94       	clt
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <__floatsisf+0x12>

00000f2c <__floatsisf>:
     f2c:	97 fb       	bst	r25, 7
     f2e:	3e f4       	brtc	.+14     	; 0xf3e <__floatsisf+0x12>
     f30:	90 95       	com	r25
     f32:	80 95       	com	r24
     f34:	70 95       	com	r23
     f36:	61 95       	neg	r22
     f38:	7f 4f       	sbci	r23, 0xFF	; 255
     f3a:	8f 4f       	sbci	r24, 0xFF	; 255
     f3c:	9f 4f       	sbci	r25, 0xFF	; 255
     f3e:	99 23       	and	r25, r25
     f40:	a9 f0       	breq	.+42     	; 0xf6c <__floatsisf+0x40>
     f42:	f9 2f       	mov	r31, r25
     f44:	96 e9       	ldi	r25, 0x96	; 150
     f46:	bb 27       	eor	r27, r27
     f48:	93 95       	inc	r25
     f4a:	f6 95       	lsr	r31
     f4c:	87 95       	ror	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f1 11       	cpse	r31, r1
     f56:	f8 cf       	rjmp	.-16     	; 0xf48 <__floatsisf+0x1c>
     f58:	fa f4       	brpl	.+62     	; 0xf98 <__floatsisf+0x6c>
     f5a:	bb 0f       	add	r27, r27
     f5c:	11 f4       	brne	.+4      	; 0xf62 <__floatsisf+0x36>
     f5e:	60 ff       	sbrs	r22, 0
     f60:	1b c0       	rjmp	.+54     	; 0xf98 <__floatsisf+0x6c>
     f62:	6f 5f       	subi	r22, 0xFF	; 255
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	16 c0       	rjmp	.+44     	; 0xf98 <__floatsisf+0x6c>
     f6c:	88 23       	and	r24, r24
     f6e:	11 f0       	breq	.+4      	; 0xf74 <__floatsisf+0x48>
     f70:	96 e9       	ldi	r25, 0x96	; 150
     f72:	11 c0       	rjmp	.+34     	; 0xf96 <__floatsisf+0x6a>
     f74:	77 23       	and	r23, r23
     f76:	21 f0       	breq	.+8      	; 0xf80 <__floatsisf+0x54>
     f78:	9e e8       	ldi	r25, 0x8E	; 142
     f7a:	87 2f       	mov	r24, r23
     f7c:	76 2f       	mov	r23, r22
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <__floatsisf+0x5e>
     f80:	66 23       	and	r22, r22
     f82:	71 f0       	breq	.+28     	; 0xfa0 <__floatsisf+0x74>
     f84:	96 e8       	ldi	r25, 0x86	; 134
     f86:	86 2f       	mov	r24, r22
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	2a f0       	brmi	.+10     	; 0xf98 <__floatsisf+0x6c>
     f8e:	9a 95       	dec	r25
     f90:	66 0f       	add	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	da f7       	brpl	.-10     	; 0xf8e <__floatsisf+0x62>
     f98:	88 0f       	add	r24, r24
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret

00000fa2 <__fp_inf>:
     fa2:	97 f9       	bld	r25, 7
     fa4:	9f 67       	ori	r25, 0x7F	; 127
     fa6:	80 e8       	ldi	r24, 0x80	; 128
     fa8:	70 e0       	ldi	r23, 0x00	; 0
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	08 95       	ret

00000fae <__fp_nan>:
     fae:	9f ef       	ldi	r25, 0xFF	; 255
     fb0:	80 ec       	ldi	r24, 0xC0	; 192
     fb2:	08 95       	ret

00000fb4 <__fp_pscA>:
     fb4:	00 24       	eor	r0, r0
     fb6:	0a 94       	dec	r0
     fb8:	16 16       	cp	r1, r22
     fba:	17 06       	cpc	r1, r23
     fbc:	18 06       	cpc	r1, r24
     fbe:	09 06       	cpc	r0, r25
     fc0:	08 95       	ret

00000fc2 <__fp_pscB>:
     fc2:	00 24       	eor	r0, r0
     fc4:	0a 94       	dec	r0
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	05 06       	cpc	r0, r21
     fce:	08 95       	ret

00000fd0 <__fp_round>:
     fd0:	09 2e       	mov	r0, r25
     fd2:	03 94       	inc	r0
     fd4:	00 0c       	add	r0, r0
     fd6:	11 f4       	brne	.+4      	; 0xfdc <__fp_round+0xc>
     fd8:	88 23       	and	r24, r24
     fda:	52 f0       	brmi	.+20     	; 0xff0 <__fp_round+0x20>
     fdc:	bb 0f       	add	r27, r27
     fde:	40 f4       	brcc	.+16     	; 0xff0 <__fp_round+0x20>
     fe0:	bf 2b       	or	r27, r31
     fe2:	11 f4       	brne	.+4      	; 0xfe8 <__fp_round+0x18>
     fe4:	60 ff       	sbrs	r22, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <__fp_round+0x20>
     fe8:	6f 5f       	subi	r22, 0xFF	; 255
     fea:	7f 4f       	sbci	r23, 0xFF	; 255
     fec:	8f 4f       	sbci	r24, 0xFF	; 255
     fee:	9f 4f       	sbci	r25, 0xFF	; 255
     ff0:	08 95       	ret

00000ff2 <__fp_split3>:
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	90 58       	subi	r25, 0x80	; 128
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	59 f0       	breq	.+22     	; 0x1012 <__fp_splitA+0x10>
     ffc:	5f 3f       	cpi	r21, 0xFF	; 255
     ffe:	71 f0       	breq	.+28     	; 0x101c <__fp_splitA+0x1a>
    1000:	47 95       	ror	r20

00001002 <__fp_splitA>:
    1002:	88 0f       	add	r24, r24
    1004:	97 fb       	bst	r25, 7
    1006:	99 1f       	adc	r25, r25
    1008:	61 f0       	breq	.+24     	; 0x1022 <__fp_splitA+0x20>
    100a:	9f 3f       	cpi	r25, 0xFF	; 255
    100c:	79 f0       	breq	.+30     	; 0x102c <__fp_splitA+0x2a>
    100e:	87 95       	ror	r24
    1010:	08 95       	ret
    1012:	12 16       	cp	r1, r18
    1014:	13 06       	cpc	r1, r19
    1016:	14 06       	cpc	r1, r20
    1018:	55 1f       	adc	r21, r21
    101a:	f2 cf       	rjmp	.-28     	; 0x1000 <__fp_split3+0xe>
    101c:	46 95       	lsr	r20
    101e:	f1 df       	rcall	.-30     	; 0x1002 <__fp_splitA>
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__fp_splitA+0x30>
    1022:	16 16       	cp	r1, r22
    1024:	17 06       	cpc	r1, r23
    1026:	18 06       	cpc	r1, r24
    1028:	99 1f       	adc	r25, r25
    102a:	f1 cf       	rjmp	.-30     	; 0x100e <__fp_splitA+0xc>
    102c:	86 95       	lsr	r24
    102e:	71 05       	cpc	r23, r1
    1030:	61 05       	cpc	r22, r1
    1032:	08 94       	sec
    1034:	08 95       	ret

00001036 <__fp_zero>:
    1036:	e8 94       	clt

00001038 <__fp_szero>:
    1038:	bb 27       	eor	r27, r27
    103a:	66 27       	eor	r22, r22
    103c:	77 27       	eor	r23, r23
    103e:	cb 01       	movw	r24, r22
    1040:	97 f9       	bld	r25, 7
    1042:	08 95       	ret

00001044 <__mulsf3>:
    1044:	0b d0       	rcall	.+22     	; 0x105c <__mulsf3x>
    1046:	c4 cf       	rjmp	.-120    	; 0xfd0 <__fp_round>
    1048:	b5 df       	rcall	.-150    	; 0xfb4 <__fp_pscA>
    104a:	28 f0       	brcs	.+10     	; 0x1056 <__mulsf3+0x12>
    104c:	ba df       	rcall	.-140    	; 0xfc2 <__fp_pscB>
    104e:	18 f0       	brcs	.+6      	; 0x1056 <__mulsf3+0x12>
    1050:	95 23       	and	r25, r21
    1052:	09 f0       	breq	.+2      	; 0x1056 <__mulsf3+0x12>
    1054:	a6 cf       	rjmp	.-180    	; 0xfa2 <__fp_inf>
    1056:	ab cf       	rjmp	.-170    	; 0xfae <__fp_nan>
    1058:	11 24       	eor	r1, r1
    105a:	ee cf       	rjmp	.-36     	; 0x1038 <__fp_szero>

0000105c <__mulsf3x>:
    105c:	ca df       	rcall	.-108    	; 0xff2 <__fp_split3>
    105e:	a0 f3       	brcs	.-24     	; 0x1048 <__mulsf3+0x4>

00001060 <__mulsf3_pse>:
    1060:	95 9f       	mul	r25, r21
    1062:	d1 f3       	breq	.-12     	; 0x1058 <__mulsf3+0x14>
    1064:	95 0f       	add	r25, r21
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	55 1f       	adc	r21, r21
    106a:	62 9f       	mul	r22, r18
    106c:	f0 01       	movw	r30, r0
    106e:	72 9f       	mul	r23, r18
    1070:	bb 27       	eor	r27, r27
    1072:	f0 0d       	add	r31, r0
    1074:	b1 1d       	adc	r27, r1
    1076:	63 9f       	mul	r22, r19
    1078:	aa 27       	eor	r26, r26
    107a:	f0 0d       	add	r31, r0
    107c:	b1 1d       	adc	r27, r1
    107e:	aa 1f       	adc	r26, r26
    1080:	64 9f       	mul	r22, r20
    1082:	66 27       	eor	r22, r22
    1084:	b0 0d       	add	r27, r0
    1086:	a1 1d       	adc	r26, r1
    1088:	66 1f       	adc	r22, r22
    108a:	82 9f       	mul	r24, r18
    108c:	22 27       	eor	r18, r18
    108e:	b0 0d       	add	r27, r0
    1090:	a1 1d       	adc	r26, r1
    1092:	62 1f       	adc	r22, r18
    1094:	73 9f       	mul	r23, r19
    1096:	b0 0d       	add	r27, r0
    1098:	a1 1d       	adc	r26, r1
    109a:	62 1f       	adc	r22, r18
    109c:	83 9f       	mul	r24, r19
    109e:	a0 0d       	add	r26, r0
    10a0:	61 1d       	adc	r22, r1
    10a2:	22 1f       	adc	r18, r18
    10a4:	74 9f       	mul	r23, r20
    10a6:	33 27       	eor	r19, r19
    10a8:	a0 0d       	add	r26, r0
    10aa:	61 1d       	adc	r22, r1
    10ac:	23 1f       	adc	r18, r19
    10ae:	84 9f       	mul	r24, r20
    10b0:	60 0d       	add	r22, r0
    10b2:	21 1d       	adc	r18, r1
    10b4:	82 2f       	mov	r24, r18
    10b6:	76 2f       	mov	r23, r22
    10b8:	6a 2f       	mov	r22, r26
    10ba:	11 24       	eor	r1, r1
    10bc:	9f 57       	subi	r25, 0x7F	; 127
    10be:	50 40       	sbci	r21, 0x00	; 0
    10c0:	8a f0       	brmi	.+34     	; 0x10e4 <__mulsf3_pse+0x84>
    10c2:	e1 f0       	breq	.+56     	; 0x10fc <__mulsf3_pse+0x9c>
    10c4:	88 23       	and	r24, r24
    10c6:	4a f0       	brmi	.+18     	; 0x10da <__mulsf3_pse+0x7a>
    10c8:	ee 0f       	add	r30, r30
    10ca:	ff 1f       	adc	r31, r31
    10cc:	bb 1f       	adc	r27, r27
    10ce:	66 1f       	adc	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	91 50       	subi	r25, 0x01	; 1
    10d6:	50 40       	sbci	r21, 0x00	; 0
    10d8:	a9 f7       	brne	.-22     	; 0x10c4 <__mulsf3_pse+0x64>
    10da:	9e 3f       	cpi	r25, 0xFE	; 254
    10dc:	51 05       	cpc	r21, r1
    10de:	70 f0       	brcs	.+28     	; 0x10fc <__mulsf3_pse+0x9c>
    10e0:	60 cf       	rjmp	.-320    	; 0xfa2 <__fp_inf>
    10e2:	aa cf       	rjmp	.-172    	; 0x1038 <__fp_szero>
    10e4:	5f 3f       	cpi	r21, 0xFF	; 255
    10e6:	ec f3       	brlt	.-6      	; 0x10e2 <__mulsf3_pse+0x82>
    10e8:	98 3e       	cpi	r25, 0xE8	; 232
    10ea:	dc f3       	brlt	.-10     	; 0x10e2 <__mulsf3_pse+0x82>
    10ec:	86 95       	lsr	r24
    10ee:	77 95       	ror	r23
    10f0:	67 95       	ror	r22
    10f2:	b7 95       	ror	r27
    10f4:	f7 95       	ror	r31
    10f6:	e7 95       	ror	r30
    10f8:	9f 5f       	subi	r25, 0xFF	; 255
    10fa:	c1 f7       	brne	.-16     	; 0x10ec <__mulsf3_pse+0x8c>
    10fc:	fe 2b       	or	r31, r30
    10fe:	88 0f       	add	r24, r24
    1100:	91 1d       	adc	r25, r1
    1102:	96 95       	lsr	r25
    1104:	87 95       	ror	r24
    1106:	97 f9       	bld	r25, 7
    1108:	08 95       	ret

0000110a <vfprintf>:
    110a:	2f 92       	push	r2
    110c:	3f 92       	push	r3
    110e:	4f 92       	push	r4
    1110:	5f 92       	push	r5
    1112:	6f 92       	push	r6
    1114:	7f 92       	push	r7
    1116:	8f 92       	push	r8
    1118:	9f 92       	push	r9
    111a:	af 92       	push	r10
    111c:	bf 92       	push	r11
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	1f 93       	push	r17
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	60 97       	sbiw	r28, 0x10	; 16
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	7c 01       	movw	r14, r24
    1140:	1b 01       	movw	r2, r22
    1142:	6a 01       	movw	r12, r20
    1144:	fc 01       	movw	r30, r24
    1146:	17 82       	std	Z+7, r1	; 0x07
    1148:	16 82       	std	Z+6, r1	; 0x06
    114a:	83 81       	ldd	r24, Z+3	; 0x03
    114c:	81 ff       	sbrs	r24, 1
    114e:	2a c3       	rjmp	.+1620   	; 0x17a4 <vfprintf+0x69a>
    1150:	9e 01       	movw	r18, r28
    1152:	2f 5f       	subi	r18, 0xFF	; 255
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	39 01       	movw	r6, r18
    1158:	f7 01       	movw	r30, r14
    115a:	93 81       	ldd	r25, Z+3	; 0x03
    115c:	f1 01       	movw	r30, r2
    115e:	93 fd       	sbrc	r25, 3
    1160:	85 91       	lpm	r24, Z+
    1162:	93 ff       	sbrs	r25, 3
    1164:	81 91       	ld	r24, Z+
    1166:	1f 01       	movw	r2, r30
    1168:	88 23       	and	r24, r24
    116a:	09 f4       	brne	.+2      	; 0x116e <vfprintf+0x64>
    116c:	17 c3       	rjmp	.+1582   	; 0x179c <vfprintf+0x692>
    116e:	85 32       	cpi	r24, 0x25	; 37
    1170:	39 f4       	brne	.+14     	; 0x1180 <vfprintf+0x76>
    1172:	93 fd       	sbrc	r25, 3
    1174:	85 91       	lpm	r24, Z+
    1176:	93 ff       	sbrs	r25, 3
    1178:	81 91       	ld	r24, Z+
    117a:	1f 01       	movw	r2, r30
    117c:	85 32       	cpi	r24, 0x25	; 37
    117e:	31 f4       	brne	.+12     	; 0x118c <vfprintf+0x82>
    1180:	b7 01       	movw	r22, r14
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	86 d4       	rcall	.+2316   	; 0x1a92 <fputc>
    1186:	56 01       	movw	r10, r12
    1188:	65 01       	movw	r12, r10
    118a:	e6 cf       	rjmp	.-52     	; 0x1158 <vfprintf+0x4e>
    118c:	10 e0       	ldi	r17, 0x00	; 0
    118e:	51 2c       	mov	r5, r1
    1190:	91 2c       	mov	r9, r1
    1192:	ff e1       	ldi	r31, 0x1F	; 31
    1194:	f9 15       	cp	r31, r9
    1196:	d8 f0       	brcs	.+54     	; 0x11ce <vfprintf+0xc4>
    1198:	8b 32       	cpi	r24, 0x2B	; 43
    119a:	79 f0       	breq	.+30     	; 0x11ba <vfprintf+0xb0>
    119c:	38 f4       	brcc	.+14     	; 0x11ac <vfprintf+0xa2>
    119e:	80 32       	cpi	r24, 0x20	; 32
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <vfprintf+0xb6>
    11a2:	83 32       	cpi	r24, 0x23	; 35
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <vfprintf+0xc4>
    11a6:	f9 2d       	mov	r31, r9
    11a8:	f0 61       	ori	r31, 0x10	; 16
    11aa:	2e c0       	rjmp	.+92     	; 0x1208 <vfprintf+0xfe>
    11ac:	8d 32       	cpi	r24, 0x2D	; 45
    11ae:	61 f0       	breq	.+24     	; 0x11c8 <vfprintf+0xbe>
    11b0:	80 33       	cpi	r24, 0x30	; 48
    11b2:	69 f4       	brne	.+26     	; 0x11ce <vfprintf+0xc4>
    11b4:	29 2d       	mov	r18, r9
    11b6:	21 60       	ori	r18, 0x01	; 1
    11b8:	2d c0       	rjmp	.+90     	; 0x1214 <vfprintf+0x10a>
    11ba:	39 2d       	mov	r19, r9
    11bc:	32 60       	ori	r19, 0x02	; 2
    11be:	93 2e       	mov	r9, r19
    11c0:	89 2d       	mov	r24, r9
    11c2:	84 60       	ori	r24, 0x04	; 4
    11c4:	98 2e       	mov	r9, r24
    11c6:	2a c0       	rjmp	.+84     	; 0x121c <vfprintf+0x112>
    11c8:	e9 2d       	mov	r30, r9
    11ca:	e8 60       	ori	r30, 0x08	; 8
    11cc:	15 c0       	rjmp	.+42     	; 0x11f8 <vfprintf+0xee>
    11ce:	97 fc       	sbrc	r9, 7
    11d0:	2d c0       	rjmp	.+90     	; 0x122c <vfprintf+0x122>
    11d2:	20 ed       	ldi	r18, 0xD0	; 208
    11d4:	28 0f       	add	r18, r24
    11d6:	2a 30       	cpi	r18, 0x0A	; 10
    11d8:	88 f4       	brcc	.+34     	; 0x11fc <vfprintf+0xf2>
    11da:	96 fe       	sbrs	r9, 6
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <vfprintf+0xe0>
    11de:	3a e0       	ldi	r19, 0x0A	; 10
    11e0:	13 9f       	mul	r17, r19
    11e2:	20 0d       	add	r18, r0
    11e4:	11 24       	eor	r1, r1
    11e6:	12 2f       	mov	r17, r18
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <vfprintf+0x112>
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	58 9e       	mul	r5, r24
    11ee:	20 0d       	add	r18, r0
    11f0:	11 24       	eor	r1, r1
    11f2:	52 2e       	mov	r5, r18
    11f4:	e9 2d       	mov	r30, r9
    11f6:	e0 62       	ori	r30, 0x20	; 32
    11f8:	9e 2e       	mov	r9, r30
    11fa:	10 c0       	rjmp	.+32     	; 0x121c <vfprintf+0x112>
    11fc:	8e 32       	cpi	r24, 0x2E	; 46
    11fe:	31 f4       	brne	.+12     	; 0x120c <vfprintf+0x102>
    1200:	96 fc       	sbrc	r9, 6
    1202:	cc c2       	rjmp	.+1432   	; 0x179c <vfprintf+0x692>
    1204:	f9 2d       	mov	r31, r9
    1206:	f0 64       	ori	r31, 0x40	; 64
    1208:	9f 2e       	mov	r9, r31
    120a:	08 c0       	rjmp	.+16     	; 0x121c <vfprintf+0x112>
    120c:	8c 36       	cpi	r24, 0x6C	; 108
    120e:	21 f4       	brne	.+8      	; 0x1218 <vfprintf+0x10e>
    1210:	29 2d       	mov	r18, r9
    1212:	20 68       	ori	r18, 0x80	; 128
    1214:	92 2e       	mov	r9, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <vfprintf+0x112>
    1218:	88 36       	cpi	r24, 0x68	; 104
    121a:	41 f4       	brne	.+16     	; 0x122c <vfprintf+0x122>
    121c:	f1 01       	movw	r30, r2
    121e:	93 fd       	sbrc	r25, 3
    1220:	85 91       	lpm	r24, Z+
    1222:	93 ff       	sbrs	r25, 3
    1224:	81 91       	ld	r24, Z+
    1226:	1f 01       	movw	r2, r30
    1228:	81 11       	cpse	r24, r1
    122a:	b3 cf       	rjmp	.-154    	; 0x1192 <vfprintf+0x88>
    122c:	9b eb       	ldi	r25, 0xBB	; 187
    122e:	98 0f       	add	r25, r24
    1230:	93 30       	cpi	r25, 0x03	; 3
    1232:	20 f4       	brcc	.+8      	; 0x123c <vfprintf+0x132>
    1234:	99 2d       	mov	r25, r9
    1236:	90 61       	ori	r25, 0x10	; 16
    1238:	80 5e       	subi	r24, 0xE0	; 224
    123a:	07 c0       	rjmp	.+14     	; 0x124a <vfprintf+0x140>
    123c:	9b e9       	ldi	r25, 0x9B	; 155
    123e:	98 0f       	add	r25, r24
    1240:	93 30       	cpi	r25, 0x03	; 3
    1242:	08 f0       	brcs	.+2      	; 0x1246 <vfprintf+0x13c>
    1244:	59 c1       	rjmp	.+690    	; 0x14f8 <vfprintf+0x3ee>
    1246:	99 2d       	mov	r25, r9
    1248:	9f 7e       	andi	r25, 0xEF	; 239
    124a:	96 ff       	sbrs	r25, 6
    124c:	16 e0       	ldi	r17, 0x06	; 6
    124e:	9f 73       	andi	r25, 0x3F	; 63
    1250:	99 2e       	mov	r9, r25
    1252:	85 36       	cpi	r24, 0x65	; 101
    1254:	19 f4       	brne	.+6      	; 0x125c <vfprintf+0x152>
    1256:	90 64       	ori	r25, 0x40	; 64
    1258:	99 2e       	mov	r9, r25
    125a:	08 c0       	rjmp	.+16     	; 0x126c <vfprintf+0x162>
    125c:	86 36       	cpi	r24, 0x66	; 102
    125e:	21 f4       	brne	.+8      	; 0x1268 <vfprintf+0x15e>
    1260:	39 2f       	mov	r19, r25
    1262:	30 68       	ori	r19, 0x80	; 128
    1264:	93 2e       	mov	r9, r19
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x162>
    1268:	11 11       	cpse	r17, r1
    126a:	11 50       	subi	r17, 0x01	; 1
    126c:	97 fe       	sbrs	r9, 7
    126e:	07 c0       	rjmp	.+14     	; 0x127e <vfprintf+0x174>
    1270:	1c 33       	cpi	r17, 0x3C	; 60
    1272:	50 f4       	brcc	.+20     	; 0x1288 <vfprintf+0x17e>
    1274:	44 24       	eor	r4, r4
    1276:	43 94       	inc	r4
    1278:	41 0e       	add	r4, r17
    127a:	27 e0       	ldi	r18, 0x07	; 7
    127c:	0b c0       	rjmp	.+22     	; 0x1294 <vfprintf+0x18a>
    127e:	18 30       	cpi	r17, 0x08	; 8
    1280:	38 f0       	brcs	.+14     	; 0x1290 <vfprintf+0x186>
    1282:	27 e0       	ldi	r18, 0x07	; 7
    1284:	17 e0       	ldi	r17, 0x07	; 7
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <vfprintf+0x188>
    1288:	27 e0       	ldi	r18, 0x07	; 7
    128a:	9c e3       	ldi	r25, 0x3C	; 60
    128c:	49 2e       	mov	r4, r25
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x18a>
    1290:	21 2f       	mov	r18, r17
    1292:	41 2c       	mov	r4, r1
    1294:	56 01       	movw	r10, r12
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	a8 0e       	add	r10, r24
    129a:	b1 1c       	adc	r11, r1
    129c:	f6 01       	movw	r30, r12
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	04 2d       	mov	r16, r4
    12a8:	a3 01       	movw	r20, r6
    12aa:	05 d3       	rcall	.+1546   	; 0x18b6 <__ftoa_engine>
    12ac:	6c 01       	movw	r12, r24
    12ae:	f9 81       	ldd	r31, Y+1	; 0x01
    12b0:	fc 87       	std	Y+12, r31	; 0x0c
    12b2:	f0 ff       	sbrs	r31, 0
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <vfprintf+0x1b0>
    12b6:	f3 ff       	sbrs	r31, 3
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <vfprintf+0x1bc>
    12ba:	91 fc       	sbrc	r9, 1
    12bc:	06 c0       	rjmp	.+12     	; 0x12ca <vfprintf+0x1c0>
    12be:	92 fe       	sbrs	r9, 2
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <vfprintf+0x1c4>
    12c2:	00 e2       	ldi	r16, 0x20	; 32
    12c4:	05 c0       	rjmp	.+10     	; 0x12d0 <vfprintf+0x1c6>
    12c6:	0d e2       	ldi	r16, 0x2D	; 45
    12c8:	03 c0       	rjmp	.+6      	; 0x12d0 <vfprintf+0x1c6>
    12ca:	0b e2       	ldi	r16, 0x2B	; 43
    12cc:	01 c0       	rjmp	.+2      	; 0x12d0 <vfprintf+0x1c6>
    12ce:	00 e0       	ldi	r16, 0x00	; 0
    12d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d2:	8c 70       	andi	r24, 0x0C	; 12
    12d4:	19 f0       	breq	.+6      	; 0x12dc <vfprintf+0x1d2>
    12d6:	01 11       	cpse	r16, r1
    12d8:	43 c2       	rjmp	.+1158   	; 0x1760 <vfprintf+0x656>
    12da:	80 c2       	rjmp	.+1280   	; 0x17dc <vfprintf+0x6d2>
    12dc:	97 fe       	sbrs	r9, 7
    12de:	10 c0       	rjmp	.+32     	; 0x1300 <vfprintf+0x1f6>
    12e0:	4c 0c       	add	r4, r12
    12e2:	fc 85       	ldd	r31, Y+12	; 0x0c
    12e4:	f4 ff       	sbrs	r31, 4
    12e6:	04 c0       	rjmp	.+8      	; 0x12f0 <vfprintf+0x1e6>
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	81 33       	cpi	r24, 0x31	; 49
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <vfprintf+0x1e6>
    12ee:	4a 94       	dec	r4
    12f0:	14 14       	cp	r1, r4
    12f2:	74 f5       	brge	.+92     	; 0x1350 <vfprintf+0x246>
    12f4:	28 e0       	ldi	r18, 0x08	; 8
    12f6:	24 15       	cp	r18, r4
    12f8:	78 f5       	brcc	.+94     	; 0x1358 <vfprintf+0x24e>
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	48 2e       	mov	r4, r24
    12fe:	2c c0       	rjmp	.+88     	; 0x1358 <vfprintf+0x24e>
    1300:	96 fc       	sbrc	r9, 6
    1302:	2a c0       	rjmp	.+84     	; 0x1358 <vfprintf+0x24e>
    1304:	81 2f       	mov	r24, r17
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	8c 15       	cp	r24, r12
    130a:	9d 05       	cpc	r25, r13
    130c:	9c f0       	brlt	.+38     	; 0x1334 <vfprintf+0x22a>
    130e:	3c ef       	ldi	r19, 0xFC	; 252
    1310:	c3 16       	cp	r12, r19
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	d3 06       	cpc	r13, r19
    1316:	74 f0       	brlt	.+28     	; 0x1334 <vfprintf+0x22a>
    1318:	89 2d       	mov	r24, r9
    131a:	80 68       	ori	r24, 0x80	; 128
    131c:	98 2e       	mov	r9, r24
    131e:	0a c0       	rjmp	.+20     	; 0x1334 <vfprintf+0x22a>
    1320:	e2 e0       	ldi	r30, 0x02	; 2
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	ec 0f       	add	r30, r28
    1326:	fd 1f       	adc	r31, r29
    1328:	e1 0f       	add	r30, r17
    132a:	f1 1d       	adc	r31, r1
    132c:	80 81       	ld	r24, Z
    132e:	80 33       	cpi	r24, 0x30	; 48
    1330:	19 f4       	brne	.+6      	; 0x1338 <vfprintf+0x22e>
    1332:	11 50       	subi	r17, 0x01	; 1
    1334:	11 11       	cpse	r17, r1
    1336:	f4 cf       	rjmp	.-24     	; 0x1320 <vfprintf+0x216>
    1338:	97 fe       	sbrs	r9, 7
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <vfprintf+0x24e>
    133c:	44 24       	eor	r4, r4
    133e:	43 94       	inc	r4
    1340:	41 0e       	add	r4, r17
    1342:	81 2f       	mov	r24, r17
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	c8 16       	cp	r12, r24
    1348:	d9 06       	cpc	r13, r25
    134a:	2c f4       	brge	.+10     	; 0x1356 <vfprintf+0x24c>
    134c:	1c 19       	sub	r17, r12
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <vfprintf+0x24e>
    1350:	44 24       	eor	r4, r4
    1352:	43 94       	inc	r4
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <vfprintf+0x24e>
    1356:	10 e0       	ldi	r17, 0x00	; 0
    1358:	97 fe       	sbrs	r9, 7
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <vfprintf+0x25e>
    135c:	1c 14       	cp	r1, r12
    135e:	1d 04       	cpc	r1, r13
    1360:	34 f4       	brge	.+12     	; 0x136e <vfprintf+0x264>
    1362:	c6 01       	movw	r24, r12
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	05 c0       	rjmp	.+10     	; 0x1372 <vfprintf+0x268>
    1368:	85 e0       	ldi	r24, 0x05	; 5
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <vfprintf+0x268>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	01 11       	cpse	r16, r1
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	11 23       	and	r17, r17
    1378:	31 f0       	breq	.+12     	; 0x1386 <vfprintf+0x27c>
    137a:	21 2f       	mov	r18, r17
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	25 2d       	mov	r18, r5
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	14 f4       	brge	.+4      	; 0x1394 <vfprintf+0x28a>
    1390:	58 1a       	sub	r5, r24
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <vfprintf+0x28c>
    1394:	51 2c       	mov	r5, r1
    1396:	89 2d       	mov	r24, r9
    1398:	89 70       	andi	r24, 0x09	; 9
    139a:	41 f4       	brne	.+16     	; 0x13ac <vfprintf+0x2a2>
    139c:	55 20       	and	r5, r5
    139e:	31 f0       	breq	.+12     	; 0x13ac <vfprintf+0x2a2>
    13a0:	b7 01       	movw	r22, r14
    13a2:	80 e2       	ldi	r24, 0x20	; 32
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	75 d3       	rcall	.+1770   	; 0x1a92 <fputc>
    13a8:	5a 94       	dec	r5
    13aa:	f8 cf       	rjmp	.-16     	; 0x139c <vfprintf+0x292>
    13ac:	00 23       	and	r16, r16
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <vfprintf+0x2ae>
    13b0:	b7 01       	movw	r22, r14
    13b2:	80 2f       	mov	r24, r16
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	6d d3       	rcall	.+1754   	; 0x1a92 <fputc>
    13b8:	93 fc       	sbrc	r9, 3
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <vfprintf+0x2c2>
    13bc:	55 20       	and	r5, r5
    13be:	31 f0       	breq	.+12     	; 0x13cc <vfprintf+0x2c2>
    13c0:	b7 01       	movw	r22, r14
    13c2:	80 e3       	ldi	r24, 0x30	; 48
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	65 d3       	rcall	.+1738   	; 0x1a92 <fputc>
    13c8:	5a 94       	dec	r5
    13ca:	f8 cf       	rjmp	.-16     	; 0x13bc <vfprintf+0x2b2>
    13cc:	97 fe       	sbrs	r9, 7
    13ce:	4a c0       	rjmp	.+148    	; 0x1464 <vfprintf+0x35a>
    13d0:	46 01       	movw	r8, r12
    13d2:	d7 fe       	sbrs	r13, 7
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <vfprintf+0x2d0>
    13d6:	81 2c       	mov	r8, r1
    13d8:	91 2c       	mov	r9, r1
    13da:	c6 01       	movw	r24, r12
    13dc:	88 19       	sub	r24, r8
    13de:	99 09       	sbc	r25, r9
    13e0:	f3 01       	movw	r30, r6
    13e2:	e8 0f       	add	r30, r24
    13e4:	f9 1f       	adc	r31, r25
    13e6:	fe 87       	std	Y+14, r31	; 0x0e
    13e8:	ed 87       	std	Y+13, r30	; 0x0d
    13ea:	96 01       	movw	r18, r12
    13ec:	24 19       	sub	r18, r4
    13ee:	31 09       	sbc	r19, r1
    13f0:	38 8b       	std	Y+16, r19	; 0x10
    13f2:	2f 87       	std	Y+15, r18	; 0x0f
    13f4:	01 2f       	mov	r16, r17
    13f6:	10 e0       	ldi	r17, 0x00	; 0
    13f8:	11 95       	neg	r17
    13fa:	01 95       	neg	r16
    13fc:	11 09       	sbc	r17, r1
    13fe:	3f ef       	ldi	r19, 0xFF	; 255
    1400:	83 16       	cp	r8, r19
    1402:	93 06       	cpc	r9, r19
    1404:	21 f4       	brne	.+8      	; 0x140e <vfprintf+0x304>
    1406:	b7 01       	movw	r22, r14
    1408:	8e e2       	ldi	r24, 0x2E	; 46
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	42 d3       	rcall	.+1668   	; 0x1a92 <fputc>
    140e:	c8 14       	cp	r12, r8
    1410:	d9 04       	cpc	r13, r9
    1412:	4c f0       	brlt	.+18     	; 0x1426 <vfprintf+0x31c>
    1414:	8f 85       	ldd	r24, Y+15	; 0x0f
    1416:	98 89       	ldd	r25, Y+16	; 0x10
    1418:	88 15       	cp	r24, r8
    141a:	99 05       	cpc	r25, r9
    141c:	24 f4       	brge	.+8      	; 0x1426 <vfprintf+0x31c>
    141e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1420:	fe 85       	ldd	r31, Y+14	; 0x0e
    1422:	81 81       	ldd	r24, Z+1	; 0x01
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <vfprintf+0x31e>
    1426:	80 e3       	ldi	r24, 0x30	; 48
    1428:	f1 e0       	ldi	r31, 0x01	; 1
    142a:	8f 1a       	sub	r8, r31
    142c:	91 08       	sbc	r9, r1
    142e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1430:	3e 85       	ldd	r19, Y+14	; 0x0e
    1432:	2f 5f       	subi	r18, 0xFF	; 255
    1434:	3f 4f       	sbci	r19, 0xFF	; 255
    1436:	3e 87       	std	Y+14, r19	; 0x0e
    1438:	2d 87       	std	Y+13, r18	; 0x0d
    143a:	80 16       	cp	r8, r16
    143c:	91 06       	cpc	r9, r17
    143e:	24 f0       	brlt	.+8      	; 0x1448 <vfprintf+0x33e>
    1440:	b7 01       	movw	r22, r14
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	26 d3       	rcall	.+1612   	; 0x1a92 <fputc>
    1446:	db cf       	rjmp	.-74     	; 0x13fe <vfprintf+0x2f4>
    1448:	c8 14       	cp	r12, r8
    144a:	d9 04       	cpc	r13, r9
    144c:	41 f4       	brne	.+16     	; 0x145e <vfprintf+0x354>
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	96 33       	cpi	r25, 0x36	; 54
    1452:	20 f4       	brcc	.+8      	; 0x145c <vfprintf+0x352>
    1454:	95 33       	cpi	r25, 0x35	; 53
    1456:	19 f4       	brne	.+6      	; 0x145e <vfprintf+0x354>
    1458:	3c 85       	ldd	r19, Y+12	; 0x0c
    145a:	34 ff       	sbrs	r19, 4
    145c:	81 e3       	ldi	r24, 0x31	; 49
    145e:	b7 01       	movw	r22, r14
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	48 c0       	rjmp	.+144    	; 0x14f4 <vfprintf+0x3ea>
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	81 33       	cpi	r24, 0x31	; 49
    1468:	19 f0       	breq	.+6      	; 0x1470 <vfprintf+0x366>
    146a:	9c 85       	ldd	r25, Y+12	; 0x0c
    146c:	9f 7e       	andi	r25, 0xEF	; 239
    146e:	9c 87       	std	Y+12, r25	; 0x0c
    1470:	b7 01       	movw	r22, r14
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e d3       	rcall	.+1564   	; 0x1a92 <fputc>
    1476:	11 11       	cpse	r17, r1
    1478:	05 c0       	rjmp	.+10     	; 0x1484 <vfprintf+0x37a>
    147a:	94 fc       	sbrc	r9, 4
    147c:	16 c0       	rjmp	.+44     	; 0x14aa <vfprintf+0x3a0>
    147e:	85 e6       	ldi	r24, 0x65	; 101
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	15 c0       	rjmp	.+42     	; 0x14ae <vfprintf+0x3a4>
    1484:	b7 01       	movw	r22, r14
    1486:	8e e2       	ldi	r24, 0x2E	; 46
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	03 d3       	rcall	.+1542   	; 0x1a92 <fputc>
    148c:	1e 5f       	subi	r17, 0xFE	; 254
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	01 e0       	ldi	r16, 0x01	; 1
    1492:	08 0f       	add	r16, r24
    1494:	f3 01       	movw	r30, r6
    1496:	e8 0f       	add	r30, r24
    1498:	f1 1d       	adc	r31, r1
    149a:	80 81       	ld	r24, Z
    149c:	b7 01       	movw	r22, r14
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	f8 d2       	rcall	.+1520   	; 0x1a92 <fputc>
    14a2:	80 2f       	mov	r24, r16
    14a4:	01 13       	cpse	r16, r17
    14a6:	f4 cf       	rjmp	.-24     	; 0x1490 <vfprintf+0x386>
    14a8:	e8 cf       	rjmp	.-48     	; 0x147a <vfprintf+0x370>
    14aa:	85 e4       	ldi	r24, 0x45	; 69
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	b7 01       	movw	r22, r14
    14b0:	f0 d2       	rcall	.+1504   	; 0x1a92 <fputc>
    14b2:	d7 fc       	sbrc	r13, 7
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0x3b8>
    14b6:	c1 14       	cp	r12, r1
    14b8:	d1 04       	cpc	r13, r1
    14ba:	41 f4       	brne	.+16     	; 0x14cc <vfprintf+0x3c2>
    14bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    14be:	e4 ff       	sbrs	r30, 4
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <vfprintf+0x3c2>
    14c2:	d1 94       	neg	r13
    14c4:	c1 94       	neg	r12
    14c6:	d1 08       	sbc	r13, r1
    14c8:	8d e2       	ldi	r24, 0x2D	; 45
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <vfprintf+0x3c4>
    14cc:	8b e2       	ldi	r24, 0x2B	; 43
    14ce:	b7 01       	movw	r22, r14
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	df d2       	rcall	.+1470   	; 0x1a92 <fputc>
    14d4:	80 e3       	ldi	r24, 0x30	; 48
    14d6:	2a e0       	ldi	r18, 0x0A	; 10
    14d8:	c2 16       	cp	r12, r18
    14da:	d1 04       	cpc	r13, r1
    14dc:	2c f0       	brlt	.+10     	; 0x14e8 <vfprintf+0x3de>
    14de:	8f 5f       	subi	r24, 0xFF	; 255
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	cf 1a       	sub	r12, r31
    14e4:	d1 08       	sbc	r13, r1
    14e6:	f7 cf       	rjmp	.-18     	; 0x14d6 <vfprintf+0x3cc>
    14e8:	b7 01       	movw	r22, r14
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	d2 d2       	rcall	.+1444   	; 0x1a92 <fputc>
    14ee:	b7 01       	movw	r22, r14
    14f0:	c6 01       	movw	r24, r12
    14f2:	c0 96       	adiw	r24, 0x30	; 48
    14f4:	ce d2       	rcall	.+1436   	; 0x1a92 <fputc>
    14f6:	49 c1       	rjmp	.+658    	; 0x178a <vfprintf+0x680>
    14f8:	83 36       	cpi	r24, 0x63	; 99
    14fa:	31 f0       	breq	.+12     	; 0x1508 <vfprintf+0x3fe>
    14fc:	83 37       	cpi	r24, 0x73	; 115
    14fe:	79 f0       	breq	.+30     	; 0x151e <vfprintf+0x414>
    1500:	83 35       	cpi	r24, 0x53	; 83
    1502:	09 f0       	breq	.+2      	; 0x1506 <vfprintf+0x3fc>
    1504:	52 c0       	rjmp	.+164    	; 0x15aa <vfprintf+0x4a0>
    1506:	1f c0       	rjmp	.+62     	; 0x1546 <vfprintf+0x43c>
    1508:	56 01       	movw	r10, r12
    150a:	32 e0       	ldi	r19, 0x02	; 2
    150c:	a3 0e       	add	r10, r19
    150e:	b1 1c       	adc	r11, r1
    1510:	f6 01       	movw	r30, r12
    1512:	80 81       	ld	r24, Z
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	01 e0       	ldi	r16, 0x01	; 1
    1518:	10 e0       	ldi	r17, 0x00	; 0
    151a:	63 01       	movw	r12, r6
    151c:	11 c0       	rjmp	.+34     	; 0x1540 <vfprintf+0x436>
    151e:	56 01       	movw	r10, r12
    1520:	f2 e0       	ldi	r31, 0x02	; 2
    1522:	af 0e       	add	r10, r31
    1524:	b1 1c       	adc	r11, r1
    1526:	f6 01       	movw	r30, r12
    1528:	c0 80       	ld	r12, Z
    152a:	d1 80       	ldd	r13, Z+1	; 0x01
    152c:	96 fe       	sbrs	r9, 6
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <vfprintf+0x42c>
    1530:	61 2f       	mov	r22, r17
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <vfprintf+0x430>
    1536:	6f ef       	ldi	r22, 0xFF	; 255
    1538:	7f ef       	ldi	r23, 0xFF	; 255
    153a:	c6 01       	movw	r24, r12
    153c:	9f d2       	rcall	.+1342   	; 0x1a7c <strnlen>
    153e:	8c 01       	movw	r16, r24
    1540:	f9 2d       	mov	r31, r9
    1542:	ff 77       	andi	r31, 0x7F	; 127
    1544:	13 c0       	rjmp	.+38     	; 0x156c <vfprintf+0x462>
    1546:	56 01       	movw	r10, r12
    1548:	22 e0       	ldi	r18, 0x02	; 2
    154a:	a2 0e       	add	r10, r18
    154c:	b1 1c       	adc	r11, r1
    154e:	f6 01       	movw	r30, r12
    1550:	c0 80       	ld	r12, Z
    1552:	d1 80       	ldd	r13, Z+1	; 0x01
    1554:	96 fe       	sbrs	r9, 6
    1556:	03 c0       	rjmp	.+6      	; 0x155e <vfprintf+0x454>
    1558:	61 2f       	mov	r22, r17
    155a:	70 e0       	ldi	r23, 0x00	; 0
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <vfprintf+0x458>
    155e:	6f ef       	ldi	r22, 0xFF	; 255
    1560:	7f ef       	ldi	r23, 0xFF	; 255
    1562:	c6 01       	movw	r24, r12
    1564:	80 d2       	rcall	.+1280   	; 0x1a66 <strnlen_P>
    1566:	8c 01       	movw	r16, r24
    1568:	f9 2d       	mov	r31, r9
    156a:	f0 68       	ori	r31, 0x80	; 128
    156c:	9f 2e       	mov	r9, r31
    156e:	f3 fd       	sbrc	r31, 3
    1570:	18 c0       	rjmp	.+48     	; 0x15a2 <vfprintf+0x498>
    1572:	85 2d       	mov	r24, r5
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	08 17       	cp	r16, r24
    1578:	19 07       	cpc	r17, r25
    157a:	98 f4       	brcc	.+38     	; 0x15a2 <vfprintf+0x498>
    157c:	b7 01       	movw	r22, r14
    157e:	80 e2       	ldi	r24, 0x20	; 32
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	87 d2       	rcall	.+1294   	; 0x1a92 <fputc>
    1584:	5a 94       	dec	r5
    1586:	f5 cf       	rjmp	.-22     	; 0x1572 <vfprintf+0x468>
    1588:	f6 01       	movw	r30, r12
    158a:	97 fc       	sbrc	r9, 7
    158c:	85 91       	lpm	r24, Z+
    158e:	97 fe       	sbrs	r9, 7
    1590:	81 91       	ld	r24, Z+
    1592:	6f 01       	movw	r12, r30
    1594:	b7 01       	movw	r22, r14
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	7c d2       	rcall	.+1272   	; 0x1a92 <fputc>
    159a:	51 10       	cpse	r5, r1
    159c:	5a 94       	dec	r5
    159e:	01 50       	subi	r16, 0x01	; 1
    15a0:	11 09       	sbc	r17, r1
    15a2:	01 15       	cp	r16, r1
    15a4:	11 05       	cpc	r17, r1
    15a6:	81 f7       	brne	.-32     	; 0x1588 <vfprintf+0x47e>
    15a8:	f0 c0       	rjmp	.+480    	; 0x178a <vfprintf+0x680>
    15aa:	84 36       	cpi	r24, 0x64	; 100
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <vfprintf+0x4a8>
    15ae:	89 36       	cpi	r24, 0x69	; 105
    15b0:	59 f5       	brne	.+86     	; 0x1608 <vfprintf+0x4fe>
    15b2:	56 01       	movw	r10, r12
    15b4:	97 fe       	sbrs	r9, 7
    15b6:	09 c0       	rjmp	.+18     	; 0x15ca <vfprintf+0x4c0>
    15b8:	24 e0       	ldi	r18, 0x04	; 4
    15ba:	a2 0e       	add	r10, r18
    15bc:	b1 1c       	adc	r11, r1
    15be:	f6 01       	movw	r30, r12
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	0a c0       	rjmp	.+20     	; 0x15de <vfprintf+0x4d4>
    15ca:	f2 e0       	ldi	r31, 0x02	; 2
    15cc:	af 0e       	add	r10, r31
    15ce:	b1 1c       	adc	r11, r1
    15d0:	f6 01       	movw	r30, r12
    15d2:	60 81       	ld	r22, Z
    15d4:	71 81       	ldd	r23, Z+1	; 0x01
    15d6:	07 2e       	mov	r0, r23
    15d8:	00 0c       	add	r0, r0
    15da:	88 0b       	sbc	r24, r24
    15dc:	99 0b       	sbc	r25, r25
    15de:	f9 2d       	mov	r31, r9
    15e0:	ff 76       	andi	r31, 0x6F	; 111
    15e2:	9f 2e       	mov	r9, r31
    15e4:	97 ff       	sbrs	r25, 7
    15e6:	09 c0       	rjmp	.+18     	; 0x15fa <vfprintf+0x4f0>
    15e8:	90 95       	com	r25
    15ea:	80 95       	com	r24
    15ec:	70 95       	com	r23
    15ee:	61 95       	neg	r22
    15f0:	7f 4f       	sbci	r23, 0xFF	; 255
    15f2:	8f 4f       	sbci	r24, 0xFF	; 255
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	f0 68       	ori	r31, 0x80	; 128
    15f8:	9f 2e       	mov	r9, r31
    15fa:	2a e0       	ldi	r18, 0x0A	; 10
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	a3 01       	movw	r20, r6
    1600:	b2 d2       	rcall	.+1380   	; 0x1b66 <__ultoa_invert>
    1602:	c8 2e       	mov	r12, r24
    1604:	c6 18       	sub	r12, r6
    1606:	3e c0       	rjmp	.+124    	; 0x1684 <vfprintf+0x57a>
    1608:	09 2d       	mov	r16, r9
    160a:	85 37       	cpi	r24, 0x75	; 117
    160c:	21 f4       	brne	.+8      	; 0x1616 <vfprintf+0x50c>
    160e:	0f 7e       	andi	r16, 0xEF	; 239
    1610:	2a e0       	ldi	r18, 0x0A	; 10
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	1d c0       	rjmp	.+58     	; 0x1650 <vfprintf+0x546>
    1616:	09 7f       	andi	r16, 0xF9	; 249
    1618:	8f 36       	cpi	r24, 0x6F	; 111
    161a:	91 f0       	breq	.+36     	; 0x1640 <vfprintf+0x536>
    161c:	18 f4       	brcc	.+6      	; 0x1624 <vfprintf+0x51a>
    161e:	88 35       	cpi	r24, 0x58	; 88
    1620:	59 f0       	breq	.+22     	; 0x1638 <vfprintf+0x52e>
    1622:	bc c0       	rjmp	.+376    	; 0x179c <vfprintf+0x692>
    1624:	80 37       	cpi	r24, 0x70	; 112
    1626:	19 f0       	breq	.+6      	; 0x162e <vfprintf+0x524>
    1628:	88 37       	cpi	r24, 0x78	; 120
    162a:	11 f0       	breq	.+4      	; 0x1630 <vfprintf+0x526>
    162c:	b7 c0       	rjmp	.+366    	; 0x179c <vfprintf+0x692>
    162e:	00 61       	ori	r16, 0x10	; 16
    1630:	04 ff       	sbrs	r16, 4
    1632:	09 c0       	rjmp	.+18     	; 0x1646 <vfprintf+0x53c>
    1634:	04 60       	ori	r16, 0x04	; 4
    1636:	07 c0       	rjmp	.+14     	; 0x1646 <vfprintf+0x53c>
    1638:	94 fe       	sbrs	r9, 4
    163a:	08 c0       	rjmp	.+16     	; 0x164c <vfprintf+0x542>
    163c:	06 60       	ori	r16, 0x06	; 6
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0x542>
    1640:	28 e0       	ldi	r18, 0x08	; 8
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <vfprintf+0x546>
    1646:	20 e1       	ldi	r18, 0x10	; 16
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0x546>
    164c:	20 e1       	ldi	r18, 0x10	; 16
    164e:	32 e0       	ldi	r19, 0x02	; 2
    1650:	56 01       	movw	r10, r12
    1652:	07 ff       	sbrs	r16, 7
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <vfprintf+0x55e>
    1656:	84 e0       	ldi	r24, 0x04	; 4
    1658:	a8 0e       	add	r10, r24
    165a:	b1 1c       	adc	r11, r1
    165c:	f6 01       	movw	r30, r12
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	08 c0       	rjmp	.+16     	; 0x1678 <vfprintf+0x56e>
    1668:	f2 e0       	ldi	r31, 0x02	; 2
    166a:	af 0e       	add	r10, r31
    166c:	b1 1c       	adc	r11, r1
    166e:	f6 01       	movw	r30, r12
    1670:	60 81       	ld	r22, Z
    1672:	71 81       	ldd	r23, Z+1	; 0x01
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a3 01       	movw	r20, r6
    167a:	75 d2       	rcall	.+1258   	; 0x1b66 <__ultoa_invert>
    167c:	c8 2e       	mov	r12, r24
    167e:	c6 18       	sub	r12, r6
    1680:	0f 77       	andi	r16, 0x7F	; 127
    1682:	90 2e       	mov	r9, r16
    1684:	96 fe       	sbrs	r9, 6
    1686:	0b c0       	rjmp	.+22     	; 0x169e <vfprintf+0x594>
    1688:	09 2d       	mov	r16, r9
    168a:	0e 7f       	andi	r16, 0xFE	; 254
    168c:	c1 16       	cp	r12, r17
    168e:	50 f4       	brcc	.+20     	; 0x16a4 <vfprintf+0x59a>
    1690:	94 fe       	sbrs	r9, 4
    1692:	0a c0       	rjmp	.+20     	; 0x16a8 <vfprintf+0x59e>
    1694:	92 fc       	sbrc	r9, 2
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <vfprintf+0x59e>
    1698:	09 2d       	mov	r16, r9
    169a:	0e 7e       	andi	r16, 0xEE	; 238
    169c:	05 c0       	rjmp	.+10     	; 0x16a8 <vfprintf+0x59e>
    169e:	dc 2c       	mov	r13, r12
    16a0:	09 2d       	mov	r16, r9
    16a2:	03 c0       	rjmp	.+6      	; 0x16aa <vfprintf+0x5a0>
    16a4:	dc 2c       	mov	r13, r12
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <vfprintf+0x5a0>
    16a8:	d1 2e       	mov	r13, r17
    16aa:	04 ff       	sbrs	r16, 4
    16ac:	0d c0       	rjmp	.+26     	; 0x16c8 <vfprintf+0x5be>
    16ae:	fe 01       	movw	r30, r28
    16b0:	ec 0d       	add	r30, r12
    16b2:	f1 1d       	adc	r31, r1
    16b4:	80 81       	ld	r24, Z
    16b6:	80 33       	cpi	r24, 0x30	; 48
    16b8:	11 f4       	brne	.+4      	; 0x16be <vfprintf+0x5b4>
    16ba:	09 7e       	andi	r16, 0xE9	; 233
    16bc:	09 c0       	rjmp	.+18     	; 0x16d0 <vfprintf+0x5c6>
    16be:	02 ff       	sbrs	r16, 2
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x5c4>
    16c2:	d3 94       	inc	r13
    16c4:	d3 94       	inc	r13
    16c6:	04 c0       	rjmp	.+8      	; 0x16d0 <vfprintf+0x5c6>
    16c8:	80 2f       	mov	r24, r16
    16ca:	86 78       	andi	r24, 0x86	; 134
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <vfprintf+0x5c6>
    16ce:	d3 94       	inc	r13
    16d0:	03 fd       	sbrc	r16, 3
    16d2:	10 c0       	rjmp	.+32     	; 0x16f4 <vfprintf+0x5ea>
    16d4:	00 ff       	sbrs	r16, 0
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <vfprintf+0x5da>
    16d8:	1c 2d       	mov	r17, r12
    16da:	d5 14       	cp	r13, r5
    16dc:	78 f4       	brcc	.+30     	; 0x16fc <vfprintf+0x5f2>
    16de:	15 0d       	add	r17, r5
    16e0:	1d 19       	sub	r17, r13
    16e2:	0c c0       	rjmp	.+24     	; 0x16fc <vfprintf+0x5f2>
    16e4:	d5 14       	cp	r13, r5
    16e6:	50 f4       	brcc	.+20     	; 0x16fc <vfprintf+0x5f2>
    16e8:	b7 01       	movw	r22, r14
    16ea:	80 e2       	ldi	r24, 0x20	; 32
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	d1 d1       	rcall	.+930    	; 0x1a92 <fputc>
    16f0:	d3 94       	inc	r13
    16f2:	f8 cf       	rjmp	.-16     	; 0x16e4 <vfprintf+0x5da>
    16f4:	d5 14       	cp	r13, r5
    16f6:	10 f4       	brcc	.+4      	; 0x16fc <vfprintf+0x5f2>
    16f8:	5d 18       	sub	r5, r13
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <vfprintf+0x5f4>
    16fc:	51 2c       	mov	r5, r1
    16fe:	04 ff       	sbrs	r16, 4
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <vfprintf+0x616>
    1702:	b7 01       	movw	r22, r14
    1704:	80 e3       	ldi	r24, 0x30	; 48
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	c4 d1       	rcall	.+904    	; 0x1a92 <fputc>
    170a:	02 ff       	sbrs	r16, 2
    170c:	16 c0       	rjmp	.+44     	; 0x173a <vfprintf+0x630>
    170e:	01 fd       	sbrc	r16, 1
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <vfprintf+0x60e>
    1712:	88 e7       	ldi	r24, 0x78	; 120
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x612>
    1718:	88 e5       	ldi	r24, 0x58	; 88
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	b7 01       	movw	r22, r14
    171e:	0c c0       	rjmp	.+24     	; 0x1738 <vfprintf+0x62e>
    1720:	80 2f       	mov	r24, r16
    1722:	86 78       	andi	r24, 0x86	; 134
    1724:	51 f0       	breq	.+20     	; 0x173a <vfprintf+0x630>
    1726:	01 ff       	sbrs	r16, 1
    1728:	02 c0       	rjmp	.+4      	; 0x172e <vfprintf+0x624>
    172a:	8b e2       	ldi	r24, 0x2B	; 43
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <vfprintf+0x626>
    172e:	80 e2       	ldi	r24, 0x20	; 32
    1730:	07 fd       	sbrc	r16, 7
    1732:	8d e2       	ldi	r24, 0x2D	; 45
    1734:	b7 01       	movw	r22, r14
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	ac d1       	rcall	.+856    	; 0x1a92 <fputc>
    173a:	c1 16       	cp	r12, r17
    173c:	30 f4       	brcc	.+12     	; 0x174a <vfprintf+0x640>
    173e:	b7 01       	movw	r22, r14
    1740:	80 e3       	ldi	r24, 0x30	; 48
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a6 d1       	rcall	.+844    	; 0x1a92 <fputc>
    1746:	11 50       	subi	r17, 0x01	; 1
    1748:	f8 cf       	rjmp	.-16     	; 0x173a <vfprintf+0x630>
    174a:	ca 94       	dec	r12
    174c:	f3 01       	movw	r30, r6
    174e:	ec 0d       	add	r30, r12
    1750:	f1 1d       	adc	r31, r1
    1752:	80 81       	ld	r24, Z
    1754:	b7 01       	movw	r22, r14
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9c d1       	rcall	.+824    	; 0x1a92 <fputc>
    175a:	c1 10       	cpse	r12, r1
    175c:	f6 cf       	rjmp	.-20     	; 0x174a <vfprintf+0x640>
    175e:	15 c0       	rjmp	.+42     	; 0x178a <vfprintf+0x680>
    1760:	f4 e0       	ldi	r31, 0x04	; 4
    1762:	f5 15       	cp	r31, r5
    1764:	50 f5       	brcc	.+84     	; 0x17ba <vfprintf+0x6b0>
    1766:	84 e0       	ldi	r24, 0x04	; 4
    1768:	58 1a       	sub	r5, r24
    176a:	93 fe       	sbrs	r9, 3
    176c:	1e c0       	rjmp	.+60     	; 0x17aa <vfprintf+0x6a0>
    176e:	01 11       	cpse	r16, r1
    1770:	25 c0       	rjmp	.+74     	; 0x17bc <vfprintf+0x6b2>
    1772:	2c 85       	ldd	r18, Y+12	; 0x0c
    1774:	23 ff       	sbrs	r18, 3
    1776:	27 c0       	rjmp	.+78     	; 0x17c6 <vfprintf+0x6bc>
    1778:	0c e8       	ldi	r16, 0x8C	; 140
    177a:	10 e0       	ldi	r17, 0x00	; 0
    177c:	39 2d       	mov	r19, r9
    177e:	30 71       	andi	r19, 0x10	; 16
    1780:	93 2e       	mov	r9, r19
    1782:	f8 01       	movw	r30, r16
    1784:	84 91       	lpm	r24, Z
    1786:	81 11       	cpse	r24, r1
    1788:	21 c0       	rjmp	.+66     	; 0x17cc <vfprintf+0x6c2>
    178a:	55 20       	and	r5, r5
    178c:	09 f4       	brne	.+2      	; 0x1790 <vfprintf+0x686>
    178e:	fc cc       	rjmp	.-1544   	; 0x1188 <vfprintf+0x7e>
    1790:	b7 01       	movw	r22, r14
    1792:	80 e2       	ldi	r24, 0x20	; 32
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	7d d1       	rcall	.+762    	; 0x1a92 <fputc>
    1798:	5a 94       	dec	r5
    179a:	f7 cf       	rjmp	.-18     	; 0x178a <vfprintf+0x680>
    179c:	f7 01       	movw	r30, r14
    179e:	86 81       	ldd	r24, Z+6	; 0x06
    17a0:	97 81       	ldd	r25, Z+7	; 0x07
    17a2:	23 c0       	rjmp	.+70     	; 0x17ea <vfprintf+0x6e0>
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	9f ef       	ldi	r25, 0xFF	; 255
    17a8:	20 c0       	rjmp	.+64     	; 0x17ea <vfprintf+0x6e0>
    17aa:	b7 01       	movw	r22, r14
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	70 d1       	rcall	.+736    	; 0x1a92 <fputc>
    17b2:	5a 94       	dec	r5
    17b4:	51 10       	cpse	r5, r1
    17b6:	f9 cf       	rjmp	.-14     	; 0x17aa <vfprintf+0x6a0>
    17b8:	da cf       	rjmp	.-76     	; 0x176e <vfprintf+0x664>
    17ba:	51 2c       	mov	r5, r1
    17bc:	b7 01       	movw	r22, r14
    17be:	80 2f       	mov	r24, r16
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	67 d1       	rcall	.+718    	; 0x1a92 <fputc>
    17c4:	d6 cf       	rjmp	.-84     	; 0x1772 <vfprintf+0x668>
    17c6:	00 e9       	ldi	r16, 0x90	; 144
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	d8 cf       	rjmp	.-80     	; 0x177c <vfprintf+0x672>
    17cc:	91 10       	cpse	r9, r1
    17ce:	80 52       	subi	r24, 0x20	; 32
    17d0:	b7 01       	movw	r22, r14
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	5e d1       	rcall	.+700    	; 0x1a92 <fputc>
    17d6:	0f 5f       	subi	r16, 0xFF	; 255
    17d8:	1f 4f       	sbci	r17, 0xFF	; 255
    17da:	d3 cf       	rjmp	.-90     	; 0x1782 <vfprintf+0x678>
    17dc:	23 e0       	ldi	r18, 0x03	; 3
    17de:	25 15       	cp	r18, r5
    17e0:	10 f4       	brcc	.+4      	; 0x17e6 <vfprintf+0x6dc>
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	c1 cf       	rjmp	.-126    	; 0x1768 <vfprintf+0x65e>
    17e6:	51 2c       	mov	r5, r1
    17e8:	c4 cf       	rjmp	.-120    	; 0x1772 <vfprintf+0x668>
    17ea:	60 96       	adiw	r28, 0x10	; 16
    17ec:	0f b6       	in	r0, 0x3f	; 63
    17ee:	f8 94       	cli
    17f0:	de bf       	out	0x3e, r29	; 62
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	cd bf       	out	0x3d, r28	; 61
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	bf 90       	pop	r11
    1808:	af 90       	pop	r10
    180a:	9f 90       	pop	r9
    180c:	8f 90       	pop	r8
    180e:	7f 90       	pop	r7
    1810:	6f 90       	pop	r6
    1812:	5f 90       	pop	r5
    1814:	4f 90       	pop	r4
    1816:	3f 90       	pop	r3
    1818:	2f 90       	pop	r2
    181a:	08 95       	ret

0000181c <__divmodsi4>:
    181c:	05 2e       	mov	r0, r21
    181e:	97 fb       	bst	r25, 7
    1820:	16 f4       	brtc	.+4      	; 0x1826 <__divmodsi4+0xa>
    1822:	00 94       	com	r0
    1824:	0f d0       	rcall	.+30     	; 0x1844 <__negsi2>
    1826:	57 fd       	sbrc	r21, 7
    1828:	05 d0       	rcall	.+10     	; 0x1834 <__divmodsi4_neg2>
    182a:	23 d0       	rcall	.+70     	; 0x1872 <__udivmodsi4>
    182c:	07 fc       	sbrc	r0, 7
    182e:	02 d0       	rcall	.+4      	; 0x1834 <__divmodsi4_neg2>
    1830:	46 f4       	brtc	.+16     	; 0x1842 <__divmodsi4_exit>
    1832:	08 c0       	rjmp	.+16     	; 0x1844 <__negsi2>

00001834 <__divmodsi4_neg2>:
    1834:	50 95       	com	r21
    1836:	40 95       	com	r20
    1838:	30 95       	com	r19
    183a:	21 95       	neg	r18
    183c:	3f 4f       	sbci	r19, 0xFF	; 255
    183e:	4f 4f       	sbci	r20, 0xFF	; 255
    1840:	5f 4f       	sbci	r21, 0xFF	; 255

00001842 <__divmodsi4_exit>:
    1842:	08 95       	ret

00001844 <__negsi2>:
    1844:	90 95       	com	r25
    1846:	80 95       	com	r24
    1848:	70 95       	com	r23
    184a:	61 95       	neg	r22
    184c:	7f 4f       	sbci	r23, 0xFF	; 255
    184e:	8f 4f       	sbci	r24, 0xFF	; 255
    1850:	9f 4f       	sbci	r25, 0xFF	; 255
    1852:	08 95       	ret

00001854 <__umulhisi3>:
    1854:	a2 9f       	mul	r26, r18
    1856:	b0 01       	movw	r22, r0
    1858:	b3 9f       	mul	r27, r19
    185a:	c0 01       	movw	r24, r0
    185c:	a3 9f       	mul	r26, r19
    185e:	70 0d       	add	r23, r0
    1860:	81 1d       	adc	r24, r1
    1862:	11 24       	eor	r1, r1
    1864:	91 1d       	adc	r25, r1
    1866:	b2 9f       	mul	r27, r18
    1868:	70 0d       	add	r23, r0
    186a:	81 1d       	adc	r24, r1
    186c:	11 24       	eor	r1, r1
    186e:	91 1d       	adc	r25, r1
    1870:	08 95       	ret

00001872 <__udivmodsi4>:
    1872:	a1 e2       	ldi	r26, 0x21	; 33
    1874:	1a 2e       	mov	r1, r26
    1876:	aa 1b       	sub	r26, r26
    1878:	bb 1b       	sub	r27, r27
    187a:	fd 01       	movw	r30, r26
    187c:	0d c0       	rjmp	.+26     	; 0x1898 <__udivmodsi4_ep>

0000187e <__udivmodsi4_loop>:
    187e:	aa 1f       	adc	r26, r26
    1880:	bb 1f       	adc	r27, r27
    1882:	ee 1f       	adc	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	a2 17       	cp	r26, r18
    1888:	b3 07       	cpc	r27, r19
    188a:	e4 07       	cpc	r30, r20
    188c:	f5 07       	cpc	r31, r21
    188e:	20 f0       	brcs	.+8      	; 0x1898 <__udivmodsi4_ep>
    1890:	a2 1b       	sub	r26, r18
    1892:	b3 0b       	sbc	r27, r19
    1894:	e4 0b       	sbc	r30, r20
    1896:	f5 0b       	sbc	r31, r21

00001898 <__udivmodsi4_ep>:
    1898:	66 1f       	adc	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	88 1f       	adc	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	1a 94       	dec	r1
    18a2:	69 f7       	brne	.-38     	; 0x187e <__udivmodsi4_loop>
    18a4:	60 95       	com	r22
    18a6:	70 95       	com	r23
    18a8:	80 95       	com	r24
    18aa:	90 95       	com	r25
    18ac:	9b 01       	movw	r18, r22
    18ae:	ac 01       	movw	r20, r24
    18b0:	bd 01       	movw	r22, r26
    18b2:	cf 01       	movw	r24, r30
    18b4:	08 95       	ret

000018b6 <__ftoa_engine>:
    18b6:	28 30       	cpi	r18, 0x08	; 8
    18b8:	08 f0       	brcs	.+2      	; 0x18bc <__ftoa_engine+0x6>
    18ba:	27 e0       	ldi	r18, 0x07	; 7
    18bc:	33 27       	eor	r19, r19
    18be:	da 01       	movw	r26, r20
    18c0:	99 0f       	add	r25, r25
    18c2:	31 1d       	adc	r19, r1
    18c4:	87 fd       	sbrc	r24, 7
    18c6:	91 60       	ori	r25, 0x01	; 1
    18c8:	00 96       	adiw	r24, 0x00	; 0
    18ca:	61 05       	cpc	r22, r1
    18cc:	71 05       	cpc	r23, r1
    18ce:	39 f4       	brne	.+14     	; 0x18de <__ftoa_engine+0x28>
    18d0:	32 60       	ori	r19, 0x02	; 2
    18d2:	2e 5f       	subi	r18, 0xFE	; 254
    18d4:	3d 93       	st	X+, r19
    18d6:	30 e3       	ldi	r19, 0x30	; 48
    18d8:	2a 95       	dec	r18
    18da:	e1 f7       	brne	.-8      	; 0x18d4 <__ftoa_engine+0x1e>
    18dc:	08 95       	ret
    18de:	9f 3f       	cpi	r25, 0xFF	; 255
    18e0:	30 f0       	brcs	.+12     	; 0x18ee <__ftoa_engine+0x38>
    18e2:	80 38       	cpi	r24, 0x80	; 128
    18e4:	71 05       	cpc	r23, r1
    18e6:	61 05       	cpc	r22, r1
    18e8:	09 f0       	breq	.+2      	; 0x18ec <__ftoa_engine+0x36>
    18ea:	3c 5f       	subi	r19, 0xFC	; 252
    18ec:	3c 5f       	subi	r19, 0xFC	; 252
    18ee:	3d 93       	st	X+, r19
    18f0:	91 30       	cpi	r25, 0x01	; 1
    18f2:	08 f0       	brcs	.+2      	; 0x18f6 <__ftoa_engine+0x40>
    18f4:	80 68       	ori	r24, 0x80	; 128
    18f6:	91 1d       	adc	r25, r1
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	1f 93       	push	r17
    18fe:	0f 93       	push	r16
    1900:	ff 92       	push	r15
    1902:	ef 92       	push	r14
    1904:	19 2f       	mov	r17, r25
    1906:	98 7f       	andi	r25, 0xF8	; 248
    1908:	96 95       	lsr	r25
    190a:	e9 2f       	mov	r30, r25
    190c:	96 95       	lsr	r25
    190e:	96 95       	lsr	r25
    1910:	e9 0f       	add	r30, r25
    1912:	ff 27       	eor	r31, r31
    1914:	e2 51       	subi	r30, 0x12	; 18
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	99 27       	eor	r25, r25
    191a:	33 27       	eor	r19, r19
    191c:	ee 24       	eor	r14, r14
    191e:	ff 24       	eor	r15, r15
    1920:	a7 01       	movw	r20, r14
    1922:	e7 01       	movw	r28, r14
    1924:	05 90       	lpm	r0, Z+
    1926:	08 94       	sec
    1928:	07 94       	ror	r0
    192a:	28 f4       	brcc	.+10     	; 0x1936 <__ftoa_engine+0x80>
    192c:	36 0f       	add	r19, r22
    192e:	e7 1e       	adc	r14, r23
    1930:	f8 1e       	adc	r15, r24
    1932:	49 1f       	adc	r20, r25
    1934:	51 1d       	adc	r21, r1
    1936:	66 0f       	add	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	06 94       	lsr	r0
    1940:	a1 f7       	brne	.-24     	; 0x192a <__ftoa_engine+0x74>
    1942:	05 90       	lpm	r0, Z+
    1944:	07 94       	ror	r0
    1946:	28 f4       	brcc	.+10     	; 0x1952 <__ftoa_engine+0x9c>
    1948:	e7 0e       	add	r14, r23
    194a:	f8 1e       	adc	r15, r24
    194c:	49 1f       	adc	r20, r25
    194e:	56 1f       	adc	r21, r22
    1950:	c1 1d       	adc	r28, r1
    1952:	77 0f       	add	r23, r23
    1954:	88 1f       	adc	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	66 1f       	adc	r22, r22
    195a:	06 94       	lsr	r0
    195c:	a1 f7       	brne	.-24     	; 0x1946 <__ftoa_engine+0x90>
    195e:	05 90       	lpm	r0, Z+
    1960:	07 94       	ror	r0
    1962:	28 f4       	brcc	.+10     	; 0x196e <__ftoa_engine+0xb8>
    1964:	f8 0e       	add	r15, r24
    1966:	49 1f       	adc	r20, r25
    1968:	56 1f       	adc	r21, r22
    196a:	c7 1f       	adc	r28, r23
    196c:	d1 1d       	adc	r29, r1
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	66 1f       	adc	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	06 94       	lsr	r0
    1978:	a1 f7       	brne	.-24     	; 0x1962 <__ftoa_engine+0xac>
    197a:	05 90       	lpm	r0, Z+
    197c:	07 94       	ror	r0
    197e:	20 f4       	brcc	.+8      	; 0x1988 <__ftoa_engine+0xd2>
    1980:	49 0f       	add	r20, r25
    1982:	56 1f       	adc	r21, r22
    1984:	c7 1f       	adc	r28, r23
    1986:	d8 1f       	adc	r29, r24
    1988:	99 0f       	add	r25, r25
    198a:	66 1f       	adc	r22, r22
    198c:	77 1f       	adc	r23, r23
    198e:	88 1f       	adc	r24, r24
    1990:	06 94       	lsr	r0
    1992:	a9 f7       	brne	.-22     	; 0x197e <__ftoa_engine+0xc8>
    1994:	84 91       	lpm	r24, Z
    1996:	10 95       	com	r17
    1998:	17 70       	andi	r17, 0x07	; 7
    199a:	41 f0       	breq	.+16     	; 0x19ac <__ftoa_engine+0xf6>
    199c:	d6 95       	lsr	r29
    199e:	c7 95       	ror	r28
    19a0:	57 95       	ror	r21
    19a2:	47 95       	ror	r20
    19a4:	f7 94       	ror	r15
    19a6:	e7 94       	ror	r14
    19a8:	1a 95       	dec	r17
    19aa:	c1 f7       	brne	.-16     	; 0x199c <__ftoa_engine+0xe6>
    19ac:	e4 e9       	ldi	r30, 0x94	; 148
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	68 94       	set
    19b2:	15 90       	lpm	r1, Z+
    19b4:	15 91       	lpm	r17, Z+
    19b6:	35 91       	lpm	r19, Z+
    19b8:	65 91       	lpm	r22, Z+
    19ba:	95 91       	lpm	r25, Z+
    19bc:	05 90       	lpm	r0, Z+
    19be:	7f e2       	ldi	r23, 0x2F	; 47
    19c0:	73 95       	inc	r23
    19c2:	e1 18       	sub	r14, r1
    19c4:	f1 0a       	sbc	r15, r17
    19c6:	43 0b       	sbc	r20, r19
    19c8:	56 0b       	sbc	r21, r22
    19ca:	c9 0b       	sbc	r28, r25
    19cc:	d0 09       	sbc	r29, r0
    19ce:	c0 f7       	brcc	.-16     	; 0x19c0 <__ftoa_engine+0x10a>
    19d0:	e1 0c       	add	r14, r1
    19d2:	f1 1e       	adc	r15, r17
    19d4:	43 1f       	adc	r20, r19
    19d6:	56 1f       	adc	r21, r22
    19d8:	c9 1f       	adc	r28, r25
    19da:	d0 1d       	adc	r29, r0
    19dc:	7e f4       	brtc	.+30     	; 0x19fc <__ftoa_engine+0x146>
    19de:	70 33       	cpi	r23, 0x30	; 48
    19e0:	11 f4       	brne	.+4      	; 0x19e6 <__ftoa_engine+0x130>
    19e2:	8a 95       	dec	r24
    19e4:	e6 cf       	rjmp	.-52     	; 0x19b2 <__ftoa_engine+0xfc>
    19e6:	e8 94       	clt
    19e8:	01 50       	subi	r16, 0x01	; 1
    19ea:	30 f0       	brcs	.+12     	; 0x19f8 <__ftoa_engine+0x142>
    19ec:	08 0f       	add	r16, r24
    19ee:	0a f4       	brpl	.+2      	; 0x19f2 <__ftoa_engine+0x13c>
    19f0:	00 27       	eor	r16, r16
    19f2:	02 17       	cp	r16, r18
    19f4:	08 f4       	brcc	.+2      	; 0x19f8 <__ftoa_engine+0x142>
    19f6:	20 2f       	mov	r18, r16
    19f8:	23 95       	inc	r18
    19fa:	02 2f       	mov	r16, r18
    19fc:	7a 33       	cpi	r23, 0x3A	; 58
    19fe:	28 f0       	brcs	.+10     	; 0x1a0a <__ftoa_engine+0x154>
    1a00:	79 e3       	ldi	r23, 0x39	; 57
    1a02:	7d 93       	st	X+, r23
    1a04:	2a 95       	dec	r18
    1a06:	e9 f7       	brne	.-6      	; 0x1a02 <__ftoa_engine+0x14c>
    1a08:	10 c0       	rjmp	.+32     	; 0x1a2a <__ftoa_engine+0x174>
    1a0a:	7d 93       	st	X+, r23
    1a0c:	2a 95       	dec	r18
    1a0e:	89 f6       	brne	.-94     	; 0x19b2 <__ftoa_engine+0xfc>
    1a10:	06 94       	lsr	r0
    1a12:	97 95       	ror	r25
    1a14:	67 95       	ror	r22
    1a16:	37 95       	ror	r19
    1a18:	17 95       	ror	r17
    1a1a:	17 94       	ror	r1
    1a1c:	e1 18       	sub	r14, r1
    1a1e:	f1 0a       	sbc	r15, r17
    1a20:	43 0b       	sbc	r20, r19
    1a22:	56 0b       	sbc	r21, r22
    1a24:	c9 0b       	sbc	r28, r25
    1a26:	d0 09       	sbc	r29, r0
    1a28:	98 f0       	brcs	.+38     	; 0x1a50 <__ftoa_engine+0x19a>
    1a2a:	23 95       	inc	r18
    1a2c:	7e 91       	ld	r23, -X
    1a2e:	73 95       	inc	r23
    1a30:	7a 33       	cpi	r23, 0x3A	; 58
    1a32:	08 f0       	brcs	.+2      	; 0x1a36 <__ftoa_engine+0x180>
    1a34:	70 e3       	ldi	r23, 0x30	; 48
    1a36:	7c 93       	st	X, r23
    1a38:	20 13       	cpse	r18, r16
    1a3a:	b8 f7       	brcc	.-18     	; 0x1a2a <__ftoa_engine+0x174>
    1a3c:	7e 91       	ld	r23, -X
    1a3e:	70 61       	ori	r23, 0x10	; 16
    1a40:	7d 93       	st	X+, r23
    1a42:	30 f0       	brcs	.+12     	; 0x1a50 <__ftoa_engine+0x19a>
    1a44:	83 95       	inc	r24
    1a46:	71 e3       	ldi	r23, 0x31	; 49
    1a48:	7d 93       	st	X+, r23
    1a4a:	70 e3       	ldi	r23, 0x30	; 48
    1a4c:	2a 95       	dec	r18
    1a4e:	e1 f7       	brne	.-8      	; 0x1a48 <__ftoa_engine+0x192>
    1a50:	11 24       	eor	r1, r1
    1a52:	ef 90       	pop	r14
    1a54:	ff 90       	pop	r15
    1a56:	0f 91       	pop	r16
    1a58:	1f 91       	pop	r17
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	99 27       	eor	r25, r25
    1a60:	87 fd       	sbrc	r24, 7
    1a62:	90 95       	com	r25
    1a64:	08 95       	ret

00001a66 <strnlen_P>:
    1a66:	fc 01       	movw	r30, r24
    1a68:	05 90       	lpm	r0, Z+
    1a6a:	61 50       	subi	r22, 0x01	; 1
    1a6c:	70 40       	sbci	r23, 0x00	; 0
    1a6e:	01 10       	cpse	r0, r1
    1a70:	d8 f7       	brcc	.-10     	; 0x1a68 <strnlen_P+0x2>
    1a72:	80 95       	com	r24
    1a74:	90 95       	com	r25
    1a76:	8e 0f       	add	r24, r30
    1a78:	9f 1f       	adc	r25, r31
    1a7a:	08 95       	ret

00001a7c <strnlen>:
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	61 50       	subi	r22, 0x01	; 1
    1a80:	70 40       	sbci	r23, 0x00	; 0
    1a82:	01 90       	ld	r0, Z+
    1a84:	01 10       	cpse	r0, r1
    1a86:	d8 f7       	brcc	.-10     	; 0x1a7e <strnlen+0x2>
    1a88:	80 95       	com	r24
    1a8a:	90 95       	com	r25
    1a8c:	8e 0f       	add	r24, r30
    1a8e:	9f 1f       	adc	r25, r31
    1a90:	08 95       	ret

00001a92 <fputc>:
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	fb 01       	movw	r30, r22
    1a9c:	23 81       	ldd	r18, Z+3	; 0x03
    1a9e:	21 fd       	sbrc	r18, 1
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <fputc+0x16>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f ef       	ldi	r25, 0xFF	; 255
    1aa6:	2c c0       	rjmp	.+88     	; 0x1b00 <fputc+0x6e>
    1aa8:	22 ff       	sbrs	r18, 2
    1aaa:	16 c0       	rjmp	.+44     	; 0x1ad8 <fputc+0x46>
    1aac:	46 81       	ldd	r20, Z+6	; 0x06
    1aae:	57 81       	ldd	r21, Z+7	; 0x07
    1ab0:	24 81       	ldd	r18, Z+4	; 0x04
    1ab2:	35 81       	ldd	r19, Z+5	; 0x05
    1ab4:	42 17       	cp	r20, r18
    1ab6:	53 07       	cpc	r21, r19
    1ab8:	44 f4       	brge	.+16     	; 0x1aca <fputc+0x38>
    1aba:	a0 81       	ld	r26, Z
    1abc:	b1 81       	ldd	r27, Z+1	; 0x01
    1abe:	9d 01       	movw	r18, r26
    1ac0:	2f 5f       	subi	r18, 0xFF	; 255
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	31 83       	std	Z+1, r19	; 0x01
    1ac6:	20 83       	st	Z, r18
    1ac8:	8c 93       	st	X, r24
    1aca:	26 81       	ldd	r18, Z+6	; 0x06
    1acc:	37 81       	ldd	r19, Z+7	; 0x07
    1ace:	2f 5f       	subi	r18, 0xFF	; 255
    1ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad2:	37 83       	std	Z+7, r19	; 0x07
    1ad4:	26 83       	std	Z+6, r18	; 0x06
    1ad6:	14 c0       	rjmp	.+40     	; 0x1b00 <fputc+0x6e>
    1ad8:	8b 01       	movw	r16, r22
    1ada:	ec 01       	movw	r28, r24
    1adc:	fb 01       	movw	r30, r22
    1ade:	00 84       	ldd	r0, Z+8	; 0x08
    1ae0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	09 95       	icall
    1ae6:	89 2b       	or	r24, r25
    1ae8:	e1 f6       	brne	.-72     	; 0x1aa2 <fputc+0x10>
    1aea:	d8 01       	movw	r26, r16
    1aec:	16 96       	adiw	r26, 0x06	; 6
    1aee:	8d 91       	ld	r24, X+
    1af0:	9c 91       	ld	r25, X
    1af2:	17 97       	sbiw	r26, 0x07	; 7
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	17 96       	adiw	r26, 0x07	; 7
    1af8:	9c 93       	st	X, r25
    1afa:	8e 93       	st	-X, r24
    1afc:	16 97       	sbiw	r26, 0x06	; 6
    1afe:	ce 01       	movw	r24, r28
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <sprintf>:
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	2e 97       	sbiw	r28, 0x0e	; 14
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	0d 89       	ldd	r16, Y+21	; 0x15
    1b24:	1e 89       	ldd	r17, Y+22	; 0x16
    1b26:	86 e0       	ldi	r24, 0x06	; 6
    1b28:	8c 83       	std	Y+4, r24	; 0x04
    1b2a:	1a 83       	std	Y+2, r17	; 0x02
    1b2c:	09 83       	std	Y+1, r16	; 0x01
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	9f e7       	ldi	r25, 0x7F	; 127
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	ae 01       	movw	r20, r28
    1b38:	47 5e       	subi	r20, 0xE7	; 231
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3c:	6f 89       	ldd	r22, Y+23	; 0x17
    1b3e:	78 8d       	ldd	r23, Y+24	; 0x18
    1b40:	ce 01       	movw	r24, r28
    1b42:	01 96       	adiw	r24, 0x01	; 1
    1b44:	e2 da       	rcall	.-2620   	; 0x110a <vfprintf>
    1b46:	ef 81       	ldd	r30, Y+7	; 0x07
    1b48:	f8 85       	ldd	r31, Y+8	; 0x08
    1b4a:	e0 0f       	add	r30, r16
    1b4c:	f1 1f       	adc	r31, r17
    1b4e:	10 82       	st	Z, r1
    1b50:	2e 96       	adiw	r28, 0x0e	; 14
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <__ultoa_invert>:
    1b66:	fa 01       	movw	r30, r20
    1b68:	aa 27       	eor	r26, r26
    1b6a:	28 30       	cpi	r18, 0x08	; 8
    1b6c:	51 f1       	breq	.+84     	; 0x1bc2 <__ultoa_invert+0x5c>
    1b6e:	20 31       	cpi	r18, 0x10	; 16
    1b70:	81 f1       	breq	.+96     	; 0x1bd2 <__ultoa_invert+0x6c>
    1b72:	e8 94       	clt
    1b74:	6f 93       	push	r22
    1b76:	6e 7f       	andi	r22, 0xFE	; 254
    1b78:	6e 5f       	subi	r22, 0xFE	; 254
    1b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b80:	af 4f       	sbci	r26, 0xFF	; 255
    1b82:	b1 e0       	ldi	r27, 0x01	; 1
    1b84:	3e d0       	rcall	.+124    	; 0x1c02 <__ultoa_invert+0x9c>
    1b86:	b4 e0       	ldi	r27, 0x04	; 4
    1b88:	3c d0       	rcall	.+120    	; 0x1c02 <__ultoa_invert+0x9c>
    1b8a:	67 0f       	add	r22, r23
    1b8c:	78 1f       	adc	r23, r24
    1b8e:	89 1f       	adc	r24, r25
    1b90:	9a 1f       	adc	r25, r26
    1b92:	a1 1d       	adc	r26, r1
    1b94:	68 0f       	add	r22, r24
    1b96:	79 1f       	adc	r23, r25
    1b98:	8a 1f       	adc	r24, r26
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	a1 1d       	adc	r26, r1
    1b9e:	6a 0f       	add	r22, r26
    1ba0:	71 1d       	adc	r23, r1
    1ba2:	81 1d       	adc	r24, r1
    1ba4:	91 1d       	adc	r25, r1
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	20 d0       	rcall	.+64     	; 0x1bea <__ultoa_invert+0x84>
    1baa:	09 f4       	brne	.+2      	; 0x1bae <__ultoa_invert+0x48>
    1bac:	68 94       	set
    1bae:	3f 91       	pop	r19
    1bb0:	2a e0       	ldi	r18, 0x0A	; 10
    1bb2:	26 9f       	mul	r18, r22
    1bb4:	11 24       	eor	r1, r1
    1bb6:	30 19       	sub	r19, r0
    1bb8:	30 5d       	subi	r19, 0xD0	; 208
    1bba:	31 93       	st	Z+, r19
    1bbc:	de f6       	brtc	.-74     	; 0x1b74 <__ultoa_invert+0xe>
    1bbe:	cf 01       	movw	r24, r30
    1bc0:	08 95       	ret
    1bc2:	46 2f       	mov	r20, r22
    1bc4:	47 70       	andi	r20, 0x07	; 7
    1bc6:	40 5d       	subi	r20, 0xD0	; 208
    1bc8:	41 93       	st	Z+, r20
    1bca:	b3 e0       	ldi	r27, 0x03	; 3
    1bcc:	0f d0       	rcall	.+30     	; 0x1bec <__ultoa_invert+0x86>
    1bce:	c9 f7       	brne	.-14     	; 0x1bc2 <__ultoa_invert+0x5c>
    1bd0:	f6 cf       	rjmp	.-20     	; 0x1bbe <__ultoa_invert+0x58>
    1bd2:	46 2f       	mov	r20, r22
    1bd4:	4f 70       	andi	r20, 0x0F	; 15
    1bd6:	40 5d       	subi	r20, 0xD0	; 208
    1bd8:	4a 33       	cpi	r20, 0x3A	; 58
    1bda:	18 f0       	brcs	.+6      	; 0x1be2 <__ultoa_invert+0x7c>
    1bdc:	49 5d       	subi	r20, 0xD9	; 217
    1bde:	31 fd       	sbrc	r19, 1
    1be0:	40 52       	subi	r20, 0x20	; 32
    1be2:	41 93       	st	Z+, r20
    1be4:	02 d0       	rcall	.+4      	; 0x1bea <__ultoa_invert+0x84>
    1be6:	a9 f7       	brne	.-22     	; 0x1bd2 <__ultoa_invert+0x6c>
    1be8:	ea cf       	rjmp	.-44     	; 0x1bbe <__ultoa_invert+0x58>
    1bea:	b4 e0       	ldi	r27, 0x04	; 4
    1bec:	a6 95       	lsr	r26
    1bee:	97 95       	ror	r25
    1bf0:	87 95       	ror	r24
    1bf2:	77 95       	ror	r23
    1bf4:	67 95       	ror	r22
    1bf6:	ba 95       	dec	r27
    1bf8:	c9 f7       	brne	.-14     	; 0x1bec <__ultoa_invert+0x86>
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	61 05       	cpc	r22, r1
    1bfe:	71 05       	cpc	r23, r1
    1c00:	08 95       	ret
    1c02:	9b 01       	movw	r18, r22
    1c04:	ac 01       	movw	r20, r24
    1c06:	0a 2e       	mov	r0, r26
    1c08:	06 94       	lsr	r0
    1c0a:	57 95       	ror	r21
    1c0c:	47 95       	ror	r20
    1c0e:	37 95       	ror	r19
    1c10:	27 95       	ror	r18
    1c12:	ba 95       	dec	r27
    1c14:	c9 f7       	brne	.-14     	; 0x1c08 <__ultoa_invert+0xa2>
    1c16:	62 0f       	add	r22, r18
    1c18:	73 1f       	adc	r23, r19
    1c1a:	84 1f       	adc	r24, r20
    1c1c:	95 1f       	adc	r25, r21
    1c1e:	a0 1d       	adc	r26, r0
    1c20:	08 95       	ret

00001c22 <_exit>:
    1c22:	f8 94       	cli

00001c24 <__stop_program>:
    1c24:	ff cf       	rjmp	.-2      	; 0x1c24 <__stop_program>
